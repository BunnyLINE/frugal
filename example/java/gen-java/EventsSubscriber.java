import com.workiva.frugal.Provider;
import com.workiva.frugal.Subscription;
import com.workiva.frugal.Transport;
import com.workiva.frugal.TransportFactory;
import org.apache.thrift.TApplicationException;
import org.apache.thrift.TException;
import org.apache.thrift.protocol.*;
import org.apache.thrift.transport.TTransportException;
import org.apache.thrift.transport.TTransportFactory;

import javax.annotation.Generated;

/**
 * Autogenerated by Frugal Compiler (0.0.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@Generated(value = "Autogenerated by Frugal Compiler (0.0.1)", date = "2015-9-22")
public class EventsSubscriber {

    private static final String delimiter = ".";

    private Provider provider;

    public EventsSubscriber(TransportFactory f, TTransportFactory t, TProtocolFactory p) {
        provider = new Provider(f, t, p);
    }

    public Subscription subscribeEventCreated(final EventCreatedHandler handler) throws TException {
        final String op = "EventCreated";
        String prefix = "";
        String topic = String.format("%sEvents%s%s", prefix, delimiter, op);
        final Provider.Client client = provider.build();
        Transport transport = client.getTransport();
        transport.subscribe(topic);

        final Subscription sub = new Subscription(topic, transport);
        new Thread(new Runnable() {
            public void run() {
                while (true) {
                    try {
                        Event received = recvEventCreated(op, client.getProtocol());
                        handler.onEventCreated(received);
                    } catch (TException e) {
                        if (e instanceof TTransportException) {
                            TTransportException transportException = (TTransportException) e;
                            if (transportException.getType() == TTransportException.END_OF_FILE) {
                                return;
                            }
                        }
                        e.printStackTrace();
                        sub.signal(e);
                        try {
                            sub.unsubscribe();
                        } catch (TTransportException e1) {
                            e1.printStackTrace();
                        }
                    }
                }
            }
        }).start();

        return sub;
    }

    private Event recvEventCreated(String op, TProtocol iprot) throws TException {
        TMessage msg = iprot.readMessageBegin();
        if (!msg.name.equals(op)) {
            TProtocolUtil.skip(iprot, TType.STRUCT);
            iprot.readMessageEnd();
            throw new TApplicationException(TApplicationException.UNKNOWN_METHOD);
        }
        Event req = new Event();
        req.read(iprot);
        iprot.readMessageEnd();
        return req;
    }

    public interface EventCreatedHandler {
        void onEventCreated(Event event);
    }

}
