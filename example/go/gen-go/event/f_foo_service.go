// Autogenerated by Frugal Compiler (0.0.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package event

import (
	"bytes"
	"fmt"
	"sync"
	"git.apache.org/thrift.git/lib/go/thrift"
	"github.com/Workiva/frugal-go"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal


type FFoo interface {
	// Ping the server.
	Ping(frugal.Context) (err error)
	// Blah the server.
	Blah(frugal.Context, int32, string, *Event) (r int64, err error)
}

type FFooClient struct {
	FTransport       frugal.FTransport
	FProtocolFactory *frugal.FProtocolFactory
	InputProtocol    *frugal.FProtocol
	OutputProtocol   *frugal.FProtocol
	mu               sync.Mutex
}

func NewFFooClient(t frugal.FTransport, f *frugal.FProtocolFactory) *FFooClient {
	t.SetRegistry(frugal.NewClientRegistry())
	return &FFooClient{
		FTransport:       t,
		FProtocolFactory: f,
		InputProtocol:    f.GetProtocol(t),
		OutputProtocol:   f.GetProtocol(t),
	}
}

// Ping the server.
func (f *FFooClient) Ping(ctx frugal.Context) (err error) {
	oprot := f.OutputProtocol
	if oprot == nil {
		oprot = f.FProtocolFactory.GetProtocol(f.FTransport)
		f.OutputProtocol = oprot
	}
	errorC := make(chan error, 1)
	resultC := make(chan struct{}, 1)
	if err = f.FTransport.Register(ctx, f.FProtocolFactory, recvPingHandler(ctx, resultC, errorC)); err != nil {
		return
	}
	f.mu.Lock()
	if err = oprot.WriteRequestHeader(ctx); err != nil {
		f.mu.Unlock()
		f.FTransport.Unregister(ctx)
		return
	}
	if err = oprot.WriteMessageBegin("ping", thrift.CALL, 0); err != nil {
		f.mu.Unlock()
		f.FTransport.Unregister(ctx)
		return
	}
	args := FooPingArgs{
	}
	if err = args.Write(oprot); err != nil {
		f.mu.Unlock()
		f.FTransport.Unregister(ctx)
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		f.mu.Unlock()
		f.FTransport.Unregister(ctx)
		return
	}
	if err = oprot.Flush(); err != nil {
		f.mu.Unlock()
		f.FTransport.Unregister(ctx)
		return
	}
	f.mu.Unlock()

	select {
	case err = <-errorC:
		return
	case <-resultC:
		f.FTransport.Unregister(ctx)
		return
	}
}

func recvPingHandler(ctx frugal.Context, resultC chan<- struct{}, errorC chan<- error) frugal.AsyncCallback {
	return func(iprot *frugal.FProtocol, err error) error {
		if err != nil {
			errorC <- err
			return nil
		}

		if err := iprot.ReadResponseHeader(ctx); err != nil {
			errorC <- err
			return nil
		}
		method, mTypeId, _, err := iprot.ReadMessageBegin()
		if err != nil {
			errorC <- err
			return nil
		}
		if method != "ping" {
			err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "ping failed: wrong method name")
			errorC <- err
			return nil
		}
		if mTypeId == thrift.EXCEPTION {
			error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
			var error1 error
			error1, err = error0.Read(iprot)
			if err != nil {
				errorC <- err
				return nil
			}
			if err = iprot.ReadMessageEnd(); err != nil {
				errorC <- err
				return nil
			}
			err = error1
			errorC <- err
			return err
		}
		if mTypeId != thrift.REPLY {
			err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "ping failed: invalid message type")
			errorC <- err
			return err
		}
		result := FooPingResult{}
		if err = result.Read(iprot); err != nil {
			errorC <- err
		return err
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			errorC <- err
			return nil
		}
		resultC <- struct{}{}
		return nil
	}
}

// Blah the server.
func (f *FFooClient) Blah(ctx frugal.Context, num int32, str string, event *Event) (r int64, err error) {
	oprot := f.OutputProtocol
	if oprot == nil {
		oprot = f.FProtocolFactory.GetProtocol(f.FTransport)
		f.OutputProtocol = oprot
	}
	errorC := make(chan error, 1)
	resultC := make(chan int64, 1)
	if err = f.FTransport.Register(ctx, f.FProtocolFactory, recvBlahHandler(ctx, resultC, errorC)); err != nil {
		return
	}
	f.mu.Lock()
	if err = oprot.WriteRequestHeader(ctx); err != nil {
		f.mu.Unlock()
		f.FTransport.Unregister(ctx)
		return
	}
	if err = oprot.WriteMessageBegin("blah", thrift.CALL, 0); err != nil {
		f.mu.Unlock()
		f.FTransport.Unregister(ctx)
		return
	}
	args := FooBlahArgs{
		Num: num,
		Str: str,
		Event: event,
	}
	if err = args.Write(oprot); err != nil {
		f.mu.Unlock()
		f.FTransport.Unregister(ctx)
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		f.mu.Unlock()
		f.FTransport.Unregister(ctx)
		return
	}
	if err = oprot.Flush(); err != nil {
		f.mu.Unlock()
		f.FTransport.Unregister(ctx)
		return
	}
	f.mu.Unlock()

	select {
	case err = <-errorC:
		return
	case r = <-resultC:
		f.FTransport.Unregister(ctx)
		return
	}
}

func recvBlahHandler(ctx frugal.Context, resultC chan<- int64, errorC chan<- error) frugal.AsyncCallback {
	return func(iprot *frugal.FProtocol, err error) error {
		if err != nil {
			errorC <- err
			return nil
		}

		if err := iprot.ReadResponseHeader(ctx); err != nil {
			errorC <- err
			return nil
		}
		method, mTypeId, _, err := iprot.ReadMessageBegin()
		if err != nil {
			errorC <- err
			return nil
		}
		if method != "blah" {
			err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "blah failed: wrong method name")
			errorC <- err
			return nil
		}
		if mTypeId == thrift.EXCEPTION {
			error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
			var error1 error
			error1, err = error0.Read(iprot)
			if err != nil {
				errorC <- err
				return nil
			}
			if err = iprot.ReadMessageEnd(); err != nil {
				errorC <- err
				return nil
			}
			err = error1
			errorC <- err
			return err
		}
		if mTypeId != thrift.REPLY {
			err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "blah failed: invalid message type")
			errorC <- err
			return err
		}
		result := FooBlahResult{}
		if err = result.Read(iprot); err != nil {
			errorC <- err
		return err
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			errorC <- err
			return nil
		}
		if result.Awe != nil {
			errorC <- result.Awe
			return result.Awe
		}
		resultC <- result.GetSuccess()
		return nil
	}
}

type FFooProcessor struct {
	processorMap map[string]frugal.FProcessorFunction
	handler      FFoo
}

func (p *FFooProcessor) GetProcessorFunction(key string) (processor frugal.FProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return
}

func NewFFooProcessor(handler FFoo) *FFooProcessor {
	p := &FFooProcessor{
		handler:      handler,
		processorMap: make(map[string]frugal.FProcessorFunction),
	}
	p.processorMap["ping"] = &fooFPing{handler: handler}
	p.processorMap["blah"] = &fooFBlah{handler: handler}
	return p
}

func (p *FFooProcessor) Process(iprot, oprot frugal.FProtocol) (success bool, err thrift.TException) {
	ctx, err := iprot.ReadRequestHeader()
	if err != nil {
		return false, err
	}
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x3 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x3.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x3
}

type fooFPing struct {
	handler FFoo
}

func (p *fooFPing) Process(ctx frugal.Context, seqId int32, iprot, oprot frugal.FProtocol) (success bool, err thrift.TException) {
	args := FooPingArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ping", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FooPingResult{}
	var err2 error
	if err2 = p.handler.Ping(ctx, ); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ping: "+err2.Error())
		oprot.WriteMessageBegin("ping", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	}
	if err2 = oprot.WriteResponseHeader(ctx); err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageBegin("ping", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type fooFBlah struct {
	handler FFoo
}

func (p *fooFBlah) Process(ctx frugal.Context, seqId int32, iprot, oprot frugal.FProtocol) (success bool, err thrift.TException) {
	args := FooBlahArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("blah", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FooBlahResult{}
	var err2 error
	var retval int64
	if retval, err2 = p.handler.Blah(ctx, args.Num, args.Str, args.Event); err2 != nil {
		switch v := err2.(type) {
		case *AwesomeException:
			result.Awe = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing blah: "+err2.Error())
			oprot.WriteMessageBegin("blah", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteResponseHeader(ctx); err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageBegin("blah", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

