// Autogenerated by Frugal Compiler (0.0.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package event

import (
	"bytes"
	"fmt"
	"sync"
	"time"

	"git.apache.org/thrift.git/lib/go/thrift"
	"github.com/Workiva/frugal/lib/go"
	"github.com/Workiva/frugal/example/go/gen-go/base"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type FFoo interface {
	base.FBaseFoo

	// Ping the server.
	Ping(*frugal.FContext) (err error)
	// Blah the server.
	Blah(*frugal.FContext, int32, string, *Event) (r int64, err error)
}

type FFooClient struct {
	*base.FBaseFooClient
	transport       frugal.FTransport
	protocolFactory *frugal.FProtocolFactory
	oprot           *frugal.FProtocol
	mu              sync.Mutex
}

func NewFFooClient(p *frugal.FServiceProvider) *FFooClient {
	t := p.Transport()
	f := p.ProtocolFactory()
	t.SetRegistry(frugal.NewFClientRegistry())
	return &FFooClient{
		FBaseFooClient: base.NewFBaseFooClient(p),
		transport:       t,
		protocolFactory: f,
		oprot:           f.GetProtocol(t),
	}
}

// Ping the server.
func (f *FFooClient) Ping(ctx *frugal.FContext) (err error) {
	errorC := make(chan error, 1)
	resultC := make(chan struct{}, 1)
	if err = f.transport.Register(ctx, f.recvPingHandler(ctx, resultC, errorC)); err != nil {
		return
	}
	defer f.transport.Unregister(ctx)
	f.mu.Lock()
	if err = f.oprot.WriteRequestHeader(ctx); err != nil {
		f.mu.Unlock()
		return
	}
	if err = f.oprot.WriteMessageBegin("ping", thrift.CALL, 0); err != nil {
		f.mu.Unlock()
		return
	}
	args := FooPingArgs{
	}
	if err = args.Write(f.oprot); err != nil {
		f.mu.Unlock()
		return
	}
	if err = f.oprot.WriteMessageEnd(); err != nil {
		f.mu.Unlock()
		return
	}
	if err = f.oprot.Flush(); err != nil {
		f.mu.Unlock()
		return
	}
	f.mu.Unlock()

	select {
	case err = <-errorC:
	case <-resultC:
	case <-time.After(ctx.Timeout()):
		err = frugal.ErrTimeout
	case <-f.transport.Closed():
		err = frugal.ErrTransportClosed
	}
	return
}

func (f *FFooClient) recvPingHandler(ctx *frugal.FContext, resultC chan<- struct{}, errorC chan<- error) frugal.FAsyncCallback {
	return func(tr thrift.TTransport) error {
		iprot := f.protocolFactory.GetProtocol(tr)
		if err := iprot.ReadResponseHeader(ctx); err != nil {
			errorC <- err
			return err
		}
		method, mTypeId, _, err := iprot.ReadMessageBegin()
		if err != nil {
			errorC <- err
			return err
		}
		if method != "ping" {
			err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "ping failed: wrong method name")
			errorC <- err
			return err
		}
		if mTypeId == thrift.EXCEPTION {
			error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
			var error1 error
			error1, err = error0.Read(iprot)
			if err != nil {
				errorC <- err
				return err
			}
			if err = iprot.ReadMessageEnd(); err != nil {
				errorC <- err
				return err
			}
			err = error1
			errorC <- err
			return err
		}
		if mTypeId != thrift.REPLY {
			err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "ping failed: invalid message type")
			errorC <- err
			return err
		}
		result := FooPingResult{}
		if err = result.Read(iprot); err != nil {
			errorC <- err
			return err
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			errorC <- err
			return err
		}
		resultC <- struct{}{}
		return nil
	}
}

// Blah the server.
func (f *FFooClient) Blah(ctx *frugal.FContext, num int32, str string, event *Event) (r int64, err error) {
	errorC := make(chan error, 1)
	resultC := make(chan int64, 1)
	if err = f.transport.Register(ctx, f.recvBlahHandler(ctx, resultC, errorC)); err != nil {
		return
	}
	defer f.transport.Unregister(ctx)
	f.mu.Lock()
	if err = f.oprot.WriteRequestHeader(ctx); err != nil {
		f.mu.Unlock()
		return
	}
	if err = f.oprot.WriteMessageBegin("blah", thrift.CALL, 0); err != nil {
		f.mu.Unlock()
		return
	}
	args := FooBlahArgs{
		Num: num,
		Str: str,
		Event: event,
	}
	if err = args.Write(f.oprot); err != nil {
		f.mu.Unlock()
		return
	}
	if err = f.oprot.WriteMessageEnd(); err != nil {
		f.mu.Unlock()
		return
	}
	if err = f.oprot.Flush(); err != nil {
		f.mu.Unlock()
		return
	}
	f.mu.Unlock()

	select {
	case err = <-errorC:
	case r = <-resultC:
	case <-time.After(ctx.Timeout()):
		err = frugal.ErrTimeout
	case <-f.transport.Closed():
		err = frugal.ErrTransportClosed
	}
	return
}

func (f *FFooClient) recvBlahHandler(ctx *frugal.FContext, resultC chan<- int64, errorC chan<- error) frugal.FAsyncCallback {
	return func(tr thrift.TTransport) error {
		iprot := f.protocolFactory.GetProtocol(tr)
		if err := iprot.ReadResponseHeader(ctx); err != nil {
			errorC <- err
			return err
		}
		method, mTypeId, _, err := iprot.ReadMessageBegin()
		if err != nil {
			errorC <- err
			return err
		}
		if method != "blah" {
			err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "blah failed: wrong method name")
			errorC <- err
			return err
		}
		if mTypeId == thrift.EXCEPTION {
			error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
			var error1 error
			error1, err = error0.Read(iprot)
			if err != nil {
				errorC <- err
				return err
			}
			if err = iprot.ReadMessageEnd(); err != nil {
				errorC <- err
				return err
			}
			err = error1
			errorC <- err
			return err
		}
		if mTypeId != thrift.REPLY {
			err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "blah failed: invalid message type")
			errorC <- err
			return err
		}
		result := FooBlahResult{}
		if err = result.Read(iprot); err != nil {
			errorC <- err
			return err
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			errorC <- err
			return err
		}
		if result.Awe != nil {
			errorC <- result.Awe
			return nil
		}
		resultC <- result.GetSuccess()
		return nil
	}
}

type FFooProcessor struct {
	*base.FBaseFooProcessor
}

func NewFFooProcessor(handler FFoo) *FFooProcessor {
	p := &FFooProcessor{
		base.NewFBaseFooProcessor(handler),
	}
	p.AddToProcessorMap("ping", &fooFPing{handler: handler, writeMu: p.GetWriteMutex()})
	p.AddToProcessorMap("blah", &fooFBlah{handler: handler, writeMu: p.GetWriteMutex()})
	return p
}

type fooFPing struct {
	handler FFoo
	writeMu *sync.Mutex
}

func (p *fooFPing) Process(ctx *frugal.FContext, iprot, oprot *frugal.FProtocol) error {
	args := FooPingArgs{}
	var err error
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		p.writeMu.Lock()
		oprot.WriteResponseHeader(ctx)
		oprot.WriteMessageBegin("ping", thrift.EXCEPTION, 0)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		p.writeMu.Unlock()
		return err
	}

	iprot.ReadMessageEnd()
	result := FooPingResult{}
	var err2 error
	if err2 = p.handler.Ping(ctx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ping: "+err2.Error())
		p.writeMu.Lock()
		oprot.WriteResponseHeader(ctx)
		oprot.WriteMessageBegin("ping", thrift.EXCEPTION, 0)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		p.writeMu.Unlock()
		return err2
	}
	p.writeMu.Lock()
	if err2 = oprot.WriteResponseHeader(ctx); err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageBegin("ping", thrift.REPLY, 0); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	p.writeMu.Unlock()
	return err
}

type fooFBlah struct {
	handler FFoo
	writeMu *sync.Mutex
}

func (p *fooFBlah) Process(ctx *frugal.FContext, iprot, oprot *frugal.FProtocol) error {
	args := FooBlahArgs{}
	var err error
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		p.writeMu.Lock()
		oprot.WriteResponseHeader(ctx)
		oprot.WriteMessageBegin("blah", thrift.EXCEPTION, 0)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		p.writeMu.Unlock()
		return err
	}

	iprot.ReadMessageEnd()
	result := FooBlahResult{}
	var err2 error
	var retval int64
	if retval, err2 = p.handler.Blah(ctx, args.Num, args.Str, args.Event); err2 != nil {
		switch v := err2.(type) {
		case *AwesomeException:
			result.Awe = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing blah: "+err2.Error())
			p.writeMu.Lock()
			oprot.WriteResponseHeader(ctx)
			oprot.WriteMessageBegin("blah", thrift.EXCEPTION, 0)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			p.writeMu.Unlock()
			return err2
		}
	} else {
		result.Success = &retval
	}
	p.writeMu.Lock()
	if err2 = oprot.WriteResponseHeader(ctx); err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageBegin("blah", thrift.REPLY, 0); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	p.writeMu.Unlock()
	return err
}

