// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package linking

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type APIMessage struct {
	AccountID     string `thrift:"AccountID,1" json:"AccountID"`
	MembershipID  string `thrift:"MembershipID,2" json:"MembershipID"`
	UserID        string `thrift:"UserID,3" json:"UserID"`
	CorrelationID string `thrift:"CorrelationID,4" json:"CorrelationID"`
}

func NewAPIMessage() *APIMessage {
	return &APIMessage{}
}

func (p *APIMessage) GetAccountID() string {
	return p.AccountID
}

func (p *APIMessage) GetMembershipID() string {
	return p.MembershipID
}

func (p *APIMessage) GetUserID() string {
	return p.UserID
}

func (p *APIMessage) GetCorrelationID() string {
	return p.CorrelationID
}
func (p *APIMessage) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *APIMessage) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.AccountID = v
	}
	return nil
}

func (p *APIMessage) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.MembershipID = v
	}
	return nil
}

func (p *APIMessage) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *APIMessage) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.CorrelationID = v
	}
	return nil
}

func (p *APIMessage) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("APIMessage"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *APIMessage) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("AccountID", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:AccountID: %s", p, err)
	}
	if err := oprot.WriteString(string(p.AccountID)); err != nil {
		return fmt.Errorf("%T.AccountID (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:AccountID: %s", p, err)
	}
	return err
}

func (p *APIMessage) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("MembershipID", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:MembershipID: %s", p, err)
	}
	if err := oprot.WriteString(string(p.MembershipID)); err != nil {
		return fmt.Errorf("%T.MembershipID (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:MembershipID: %s", p, err)
	}
	return err
}

func (p *APIMessage) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("UserID", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:UserID: %s", p, err)
	}
	if err := oprot.WriteString(string(p.UserID)); err != nil {
		return fmt.Errorf("%T.UserID (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:UserID: %s", p, err)
	}
	return err
}

func (p *APIMessage) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("CorrelationID", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:CorrelationID: %s", p, err)
	}
	if err := oprot.WriteString(string(p.CorrelationID)); err != nil {
		return fmt.Errorf("%T.CorrelationID (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:CorrelationID: %s", p, err)
	}
	return err
}

func (p *APIMessage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("APIMessage(%+v)", *p)
}

type AtomUpdate struct {
	ID     int64  `thrift:"ID,1" json:"ID"`
	Value  string `thrift:"Value,2" json:"Value"`
	Target string `thrift:"Target,3" json:"Target"`
}

func NewAtomUpdate() *AtomUpdate {
	return &AtomUpdate{}
}

func (p *AtomUpdate) GetID() int64 {
	return p.ID
}

func (p *AtomUpdate) GetValue() string {
	return p.Value
}

func (p *AtomUpdate) GetTarget() string {
	return p.Target
}
func (p *AtomUpdate) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AtomUpdate) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *AtomUpdate) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Value = v
	}
	return nil
}

func (p *AtomUpdate) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Target = v
	}
	return nil
}

func (p *AtomUpdate) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AtomUpdate"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AtomUpdate) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ID", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:ID: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return fmt.Errorf("%T.ID (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:ID: %s", p, err)
	}
	return err
}

func (p *AtomUpdate) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Value", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:Value: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Value)); err != nil {
		return fmt.Errorf("%T.Value (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:Value: %s", p, err)
	}
	return err
}

func (p *AtomUpdate) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Target", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:Target: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Target)); err != nil {
		return fmt.Errorf("%T.Target (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:Target: %s", p, err)
	}
	return err
}

func (p *AtomUpdate) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AtomUpdate(%+v)", *p)
}

type APIError struct {
	Code    int64  `thrift:"Code,1" json:"Code"`
	Message string `thrift:"Message,2" json:"Message"`
}

func NewAPIError() *APIError {
	return &APIError{}
}

func (p *APIError) GetCode() int64 {
	return p.Code
}

func (p *APIError) GetMessage() string {
	return p.Message
}
func (p *APIError) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *APIError) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Code = v
	}
	return nil
}

func (p *APIError) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *APIError) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("APIError"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *APIError) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Code", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:Code: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Code)); err != nil {
		return fmt.Errorf("%T.Code (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:Code: %s", p, err)
	}
	return err
}

func (p *APIError) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Message", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:Message: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return fmt.Errorf("%T.Message (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:Message: %s", p, err)
	}
	return err
}

func (p *APIError) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("APIError(%+v)", *p)
}

func (p *APIError) Error() string {
	return p.String()
}

type StandardResponse struct {
	Base    *APIMessage `thrift:"Base,1" json:"Base"`
	ErrorA1 *APIError   `thrift:"Error,2" json:"Error"`
}

func NewStandardResponse() *StandardResponse {
	return &StandardResponse{}
}

var StandardResponse_Base_DEFAULT *APIMessage

func (p *StandardResponse) GetBase() *APIMessage {
	if !p.IsSetBase() {
		return StandardResponse_Base_DEFAULT
	}
	return p.Base
}

var StandardResponse_ErrorA1_DEFAULT *APIError

func (p *StandardResponse) GetErrorA1() *APIError {
	if !p.IsSetErrorA1() {
		return StandardResponse_ErrorA1_DEFAULT
	}
	return p.ErrorA1
}
func (p *StandardResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *StandardResponse) IsSetErrorA1() bool {
	return p.ErrorA1 != nil
}

func (p *StandardResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *StandardResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Base = &APIMessage{}
	if err := p.Base.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Base, err)
	}
	return nil
}

func (p *StandardResponse) ReadField2(iprot thrift.TProtocol) error {
	p.ErrorA1 = &APIError{}
	if err := p.ErrorA1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ErrorA1, err)
	}
	return nil
}

func (p *StandardResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("StandardResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *StandardResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Base", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:Base: %s", p, err)
	}
	if err := p.Base.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Base, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:Base: %s", p, err)
	}
	return err
}

func (p *StandardResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrorA1() {
		if err := oprot.WriteFieldBegin("Error", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:Error: %s", p, err)
		}
		if err := p.ErrorA1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.ErrorA1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:Error: %s", p, err)
		}
	}
	return err
}

func (p *StandardResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StandardResponse(%+v)", *p)
}

type Atom struct {
	ID           int64  `thrift:"ID,1" json:"ID"`
	Version      int64  `thrift:"Version,2" json:"Version"`
	Value        string `thrift:"Value,3" json:"Value"`
	Target       string `thrift:"Target,4" json:"Target"`
	MembershipID string `thrift:"MembershipID,5" json:"MembershipID"`
	UserID       string `thrift:"UserID,6" json:"UserID"`
	Timestamp    string `thrift:"Timestamp,7" json:"Timestamp"`
}

func NewAtom() *Atom {
	return &Atom{}
}

func (p *Atom) GetID() int64 {
	return p.ID
}

func (p *Atom) GetVersion() int64 {
	return p.Version
}

func (p *Atom) GetValue() string {
	return p.Value
}

func (p *Atom) GetTarget() string {
	return p.Target
}

func (p *Atom) GetMembershipID() string {
	return p.MembershipID
}

func (p *Atom) GetUserID() string {
	return p.UserID
}

func (p *Atom) GetTimestamp() string {
	return p.Timestamp
}
func (p *Atom) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Atom) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *Atom) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Version = v
	}
	return nil
}

func (p *Atom) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Value = v
	}
	return nil
}

func (p *Atom) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Target = v
	}
	return nil
}

func (p *Atom) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.MembershipID = v
	}
	return nil
}

func (p *Atom) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *Atom) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.Timestamp = v
	}
	return nil
}

func (p *Atom) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Atom"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Atom) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ID", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:ID: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return fmt.Errorf("%T.ID (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:ID: %s", p, err)
	}
	return err
}

func (p *Atom) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Version", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:Version: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Version)); err != nil {
		return fmt.Errorf("%T.Version (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:Version: %s", p, err)
	}
	return err
}

func (p *Atom) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Value", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:Value: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Value)); err != nil {
		return fmt.Errorf("%T.Value (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:Value: %s", p, err)
	}
	return err
}

func (p *Atom) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Target", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:Target: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Target)); err != nil {
		return fmt.Errorf("%T.Target (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:Target: %s", p, err)
	}
	return err
}

func (p *Atom) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("MembershipID", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:MembershipID: %s", p, err)
	}
	if err := oprot.WriteString(string(p.MembershipID)); err != nil {
		return fmt.Errorf("%T.MembershipID (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:MembershipID: %s", p, err)
	}
	return err
}

func (p *Atom) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("UserID", thrift.STRING, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:UserID: %s", p, err)
	}
	if err := oprot.WriteString(string(p.UserID)); err != nil {
		return fmt.Errorf("%T.UserID (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:UserID: %s", p, err)
	}
	return err
}

func (p *Atom) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Timestamp", thrift.STRING, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:Timestamp: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Timestamp)); err != nil {
		return fmt.Errorf("%T.Timestamp (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:Timestamp: %s", p, err)
	}
	return err
}

func (p *Atom) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Atom(%+v)", *p)
}

type AtomUpdateRequest struct {
	Base    *APIMessage   `thrift:"Base,1" json:"Base"`
	Updates []*AtomUpdate `thrift:"Updates,2" json:"Updates"`
}

func NewAtomUpdateRequest() *AtomUpdateRequest {
	return &AtomUpdateRequest{}
}

var AtomUpdateRequest_Base_DEFAULT *APIMessage

func (p *AtomUpdateRequest) GetBase() *APIMessage {
	if !p.IsSetBase() {
		return AtomUpdateRequest_Base_DEFAULT
	}
	return p.Base
}

func (p *AtomUpdateRequest) GetUpdates() []*AtomUpdate {
	return p.Updates
}
func (p *AtomUpdateRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *AtomUpdateRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AtomUpdateRequest) ReadField1(iprot thrift.TProtocol) error {
	p.Base = &APIMessage{}
	if err := p.Base.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Base, err)
	}
	return nil
}

func (p *AtomUpdateRequest) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*AtomUpdate, 0, size)
	p.Updates = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &AtomUpdate{}
		if err := _elem0.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem0, err)
		}
		p.Updates = append(p.Updates, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *AtomUpdateRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AtomUpdateRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AtomUpdateRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Base", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:Base: %s", p, err)
	}
	if err := p.Base.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Base, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:Base: %s", p, err)
	}
	return err
}

func (p *AtomUpdateRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Updates", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:Updates: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Updates)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Updates {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:Updates: %s", p, err)
	}
	return err
}

func (p *AtomUpdateRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AtomUpdateRequest(%+v)", *p)
}

type AtomUpdateResponse struct {
	Base  *StandardResponse `thrift:"Base,1" json:"Base"`
	Atoms []*Atom           `thrift:"Atoms,2" json:"Atoms"`
}

func NewAtomUpdateResponse() *AtomUpdateResponse {
	return &AtomUpdateResponse{}
}

var AtomUpdateResponse_Base_DEFAULT *StandardResponse

func (p *AtomUpdateResponse) GetBase() *StandardResponse {
	if !p.IsSetBase() {
		return AtomUpdateResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *AtomUpdateResponse) GetAtoms() []*Atom {
	return p.Atoms
}
func (p *AtomUpdateResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *AtomUpdateResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AtomUpdateResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Base = &StandardResponse{}
	if err := p.Base.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Base, err)
	}
	return nil
}

func (p *AtomUpdateResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Atom, 0, size)
	p.Atoms = tSlice
	for i := 0; i < size; i++ {
		_elem1 := &Atom{}
		if err := _elem1.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem1, err)
		}
		p.Atoms = append(p.Atoms, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *AtomUpdateResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AtomUpdateResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AtomUpdateResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Base", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:Base: %s", p, err)
	}
	if err := p.Base.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Base, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:Base: %s", p, err)
	}
	return err
}

func (p *AtomUpdateResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Atoms", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:Atoms: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Atoms)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Atoms {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:Atoms: %s", p, err)
	}
	return err
}

func (p *AtomUpdateResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AtomUpdateResponse(%+v)", *p)
}

type GetCurrentAtomsRequest struct {
	Base    *APIMessage `thrift:"Base,1" json:"Base"`
	AtomIDs []string    `thrift:"AtomIDs,2" json:"AtomIDs"`
}

func NewGetCurrentAtomsRequest() *GetCurrentAtomsRequest {
	return &GetCurrentAtomsRequest{}
}

var GetCurrentAtomsRequest_Base_DEFAULT *APIMessage

func (p *GetCurrentAtomsRequest) GetBase() *APIMessage {
	if !p.IsSetBase() {
		return GetCurrentAtomsRequest_Base_DEFAULT
	}
	return p.Base
}

func (p *GetCurrentAtomsRequest) GetAtomIDs() []string {
	return p.AtomIDs
}
func (p *GetCurrentAtomsRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetCurrentAtomsRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetCurrentAtomsRequest) ReadField1(iprot thrift.TProtocol) error {
	p.Base = &APIMessage{}
	if err := p.Base.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Base, err)
	}
	return nil
}

func (p *GetCurrentAtomsRequest) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.AtomIDs = tSlice
	for i := 0; i < size; i++ {
		var _elem2 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem2 = v
		}
		p.AtomIDs = append(p.AtomIDs, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetCurrentAtomsRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetCurrentAtomsRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetCurrentAtomsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Base", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:Base: %s", p, err)
	}
	if err := p.Base.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Base, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:Base: %s", p, err)
	}
	return err
}

func (p *GetCurrentAtomsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("AtomIDs", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:AtomIDs: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.AtomIDs)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.AtomIDs {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:AtomIDs: %s", p, err)
	}
	return err
}

func (p *GetCurrentAtomsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCurrentAtomsRequest(%+v)", *p)
}

type GetCurrentAtomsResponse struct {
	Base  *StandardResponse `thrift:"Base,1" json:"Base"`
	Atoms []*Atom           `thrift:"Atoms,2" json:"Atoms"`
}

func NewGetCurrentAtomsResponse() *GetCurrentAtomsResponse {
	return &GetCurrentAtomsResponse{}
}

var GetCurrentAtomsResponse_Base_DEFAULT *StandardResponse

func (p *GetCurrentAtomsResponse) GetBase() *StandardResponse {
	if !p.IsSetBase() {
		return GetCurrentAtomsResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *GetCurrentAtomsResponse) GetAtoms() []*Atom {
	return p.Atoms
}
func (p *GetCurrentAtomsResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetCurrentAtomsResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetCurrentAtomsResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Base = &StandardResponse{}
	if err := p.Base.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Base, err)
	}
	return nil
}

func (p *GetCurrentAtomsResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Atom, 0, size)
	p.Atoms = tSlice
	for i := 0; i < size; i++ {
		_elem3 := &Atom{}
		if err := _elem3.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem3, err)
		}
		p.Atoms = append(p.Atoms, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetCurrentAtomsResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetCurrentAtomsResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetCurrentAtomsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Base", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:Base: %s", p, err)
	}
	if err := p.Base.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Base, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:Base: %s", p, err)
	}
	return err
}

func (p *GetCurrentAtomsResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Atoms", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:Atoms: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Atoms)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Atoms {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:Atoms: %s", p, err)
	}
	return err
}

func (p *GetCurrentAtomsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCurrentAtomsResponse(%+v)", *p)
}
