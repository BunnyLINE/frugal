// Autogenerated by Frugal Compiler (0.0.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

library event.src.f_foo_scope;

import 'dart:async';

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart' as thrift;
import 'package:frugal/frugal.dart' as frugal;

import 'package:event/event.dart' as t_event;
import 'foo.dart' as t_foo;


/// This is a thrift service. Frugal will generate bindings that include 
/// a frugal Context for each service call.
abstract class FFoo {

  /// Ping the server.
  Future ping(frugal.Context ctx);

  /// Blah the server.
  Future<int> blah(frugal.Context ctx, int num, String str, t_event.Event event);
}

/// This is a thrift service. Frugal will generate bindings that include 
/// a frugal Context for each service call.
class FFooClient implements FFoo {

  FFooClient(frugal.FTransport transport, frugal.FProtocolFactory protocolFactory) {
    _transport = transport;
    _transport.setRegistry(new frugal.ClientRegistry());
    _protocolFactory = protocolFactory;
    _oprot = _protocolFactory.getProtocol(transport);
  }

  frugal.FTransport _transport;
  frugal.FProtocolFactory _protocolFactory;
  frugal.FProtocol _oprot;
  frugal.FProtocol get oprot => _oprot;

  /// Ping the server.
  Future ping(frugal.Context ctx) async {
    var controller = new StreamController();
    _transport.register(ctx, _recvPingHandler(ctx, controller));
    try {
      oprot.writeRequestHeader(ctx);
      oprot.writeMessageBegin(new thrift.TMessage("ping", thrift.TMessageType.CALL, 0));
      t_foo.ping_args args = new t_foo.ping_args();
      args.write(oprot);
      oprot.writeMessageEnd();
      await oprot.transport.flush();
      return await controller.stream.first.timeout(ctx.timeout);
    } finally {
      _transport.unregister(ctx);
    }
  }

  _recvPingHandler(frugal.Context ctx, StreamController controller) {
    pingCallback(thrift.TTransport transport) {
      try {
        var iprot = _protocolFactory.getProtocol(transport);
        iprot.readResponseHeader(ctx);
        thrift.TMessage msg = iprot.readMessageBegin();
        if (msg.type == thrift.TMessageType.EXCEPTION) {
          thrift.TApplicationError error = thrift.TApplicationError.read(iprot);
          iprot.readMessageEnd();
          throw error;
        }

        t_foo.ping_result result = new t_foo.ping_result();
        result.read(iprot);
        iprot.readMessageEnd();
        controller.add(null);
      } catch(e) {
        controller.addError(e);
        rethrow;
      }
    }
    return pingCallback;
  }

  /// Blah the server.
  Future<int> blah(frugal.Context ctx, int num, String str, t_event.Event event) async {
    var controller = new StreamController();
    _transport.register(ctx, _recvBlahHandler(ctx, controller));
    try {
      oprot.writeRequestHeader(ctx);
      oprot.writeMessageBegin(new thrift.TMessage("blah", thrift.TMessageType.CALL, 0));
      t_foo.blah_args args = new t_foo.blah_args();
      args.num = num;
      args.str = str;
      args.event = event;
      args.write(oprot);
      oprot.writeMessageEnd();
      await oprot.transport.flush();
      return await controller.stream.first.timeout(ctx.timeout);
    } finally {
      _transport.unregister(ctx);
    }
  }

  _recvBlahHandler(frugal.Context ctx, StreamController controller) {
    blahCallback(thrift.TTransport transport) {
      try {
        var iprot = _protocolFactory.getProtocol(transport);
        iprot.readResponseHeader(ctx);
        thrift.TMessage msg = iprot.readMessageBegin();
        if (msg.type == thrift.TMessageType.EXCEPTION) {
          thrift.TApplicationError error = thrift.TApplicationError.read(iprot);
          iprot.readMessageEnd();
          throw error;
        }

        t_foo.blah_result result = new t_foo.blah_result();
        result.read(iprot);
        iprot.readMessageEnd();
        if (result.isSetSuccess()) {
          controller.add(result.success);
          return;
        }

        if (result.awe != null) {
          controller.addError(result.awe);
          return;
        }
        throw new thrift.TApplicationError(
          thrift.TApplicationErrorType.MISSING_RESULT, "blah failed: unknown result"
        );
      } catch(e) {
        controller.addError(e);
        rethrow;
      }
    }
    return blahCallback;
  }

}
