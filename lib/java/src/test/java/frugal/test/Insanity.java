/**
 * Autogenerated by Frugal Compiler (3.14.1)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package frugal.test;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Objects;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Insanity implements org.apache.thrift.TBase<Insanity, Insanity._Fields>, java.io.Serializable, Cloneable, Comparable<Insanity> {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Insanity");

	private static final org.apache.thrift.protocol.TField USER_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("userMap", org.apache.thrift.protocol.TType.MAP, (short)1);
	private static final org.apache.thrift.protocol.TField XTRUCTS_FIELD_DESC = new org.apache.thrift.protocol.TField("xtructs", org.apache.thrift.protocol.TType.LIST, (short)2);

	public java.util.Map<Numberz, Long> userMap;
	public java.util.List<Xtruct> xtructs;
	/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		USER_MAP((short)1, "userMap"),
		XTRUCTS((short)2, "xtructs")
		;

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch(fieldId) {
				case 1: // USER_MAP
					return USER_MAP;
				case 2: // XTRUCTS
					return XTRUCTS;
				default:
					return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	public Insanity() {
	}

	public Insanity(
		java.util.Map<Numberz, Long> userMap,
		java.util.List<Xtruct> xtructs) {
		this();
		this.userMap = userMap;
		this.xtructs = xtructs;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public Insanity(Insanity other) {
		if (other.isSetUserMap()) {
			this.userMap = new HashMap<Numberz,Long>(other.userMap.size());
			for (Map.Entry<Numberz, Long> elem10 : other.userMap.entrySet()) {
				Numberz elem12 = elem10.getKey();
				long elem11 = elem10.getValue();
				this.userMap.put(elem12, elem11);
			}
		}
		if (other.isSetXtructs()) {
			this.xtructs = new ArrayList<Xtruct>(other.xtructs.size());
			for (Xtruct elem13 : other.xtructs) {
				Xtruct elem14 = new Xtruct(elem13);
				this.xtructs.add(elem14);
			}
		}
	}

	public Insanity deepCopy() {
		return new Insanity(this);
	}

	@Override
	public void clear() {
		this.userMap = null;

		this.xtructs = null;

	}

	public int getUserMapSize() {
		return (this.userMap == null) ? 0 : this.userMap.size();
	}

	public void putToUserMap(Numberz key, long val) {
		if (this.userMap == null) {
			this.userMap = new HashMap<Numberz,Long>();
		}
		this.userMap.put(key, val);
	}

	public java.util.Map<Numberz, Long> getUserMap() {
		return this.userMap;
	}

	public Insanity setUserMap(java.util.Map<Numberz, Long> userMap) {
		this.userMap = userMap;
		return this;
	}

	public void unsetUserMap() {
		this.userMap = null;
	}

	/** Returns true if field userMap is set (has been assigned a value) and false otherwise */
	public boolean isSetUserMap() {
		return this.userMap != null;
	}

	public void setUserMapIsSet(boolean value) {
		if (!value) {
			this.userMap = null;
		}
	}

	public int getXtructsSize() {
		return (this.xtructs == null) ? 0 : this.xtructs.size();
	}

	public java.util.Iterator<Xtruct> getXtructsIterator() {
		return (this.xtructs == null) ? null : this.xtructs.iterator();
	}

	public void addToXtructs(Xtruct elem) {
		if (this.xtructs == null) {
			this.xtructs = new ArrayList<Xtruct>();
		}
		this.xtructs.add(elem);
	}

	public java.util.List<Xtruct> getXtructs() {
		return this.xtructs;
	}

	public Insanity setXtructs(java.util.List<Xtruct> xtructs) {
		this.xtructs = xtructs;
		return this;
	}

	public void unsetXtructs() {
		this.xtructs = null;
	}

	/** Returns true if field xtructs is set (has been assigned a value) and false otherwise */
	public boolean isSetXtructs() {
		return this.xtructs != null;
	}

	public void setXtructsIsSet(boolean value) {
		if (!value) {
			this.xtructs = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case USER_MAP:
			if (value == null) {
				unsetUserMap();
			} else {
				setUserMap((java.util.Map<Numberz, Long>)value);
			}
			break;

		case XTRUCTS:
			if (value == null) {
				unsetXtructs();
			} else {
				setXtructs((java.util.List<Xtruct>)value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case USER_MAP:
			return getUserMap();

		case XTRUCTS:
			return getXtructs();

		}
		throw new IllegalStateException();
	}

	/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case USER_MAP:
			return isSetUserMap();
		case XTRUCTS:
			return isSetXtructs();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof Insanity)
			return this.equals((Insanity)that);
		return false;
	}

	public boolean equals(Insanity that) {
		if (that == null)
			return false;
		if (!Objects.equals(this.userMap, that.userMap))
			return false;
		if (!Objects.equals(this.xtructs, that.xtructs))
			return false;
		return true;
	}

	@Override
	public int hashCode() {
		List<Object> list = new ArrayList<Object>();

		boolean present_userMap = true && (isSetUserMap());
		list.add(present_userMap);
		if (present_userMap)
			list.add(userMap);

		boolean present_xtructs = true && (isSetXtructs());
		list.add(present_xtructs);
		if (present_xtructs)
			list.add(xtructs);

		return list.hashCode();
	}

	@Override
	public int compareTo(Insanity other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = Boolean.compare(isSetUserMap(), other.isSetUserMap());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUserMap()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userMap, other.userMap);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.compare(isSetXtructs(), other.isSetXtructs());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetXtructs()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xtructs, other.xtructs);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		if (iprot.getScheme() != StandardScheme.class) {
			throw new UnsupportedOperationException();
		}
		new InsanityStandardScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		if (oprot.getScheme() != StandardScheme.class) {
			throw new UnsupportedOperationException();
		}
		new InsanityStandardScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("Insanity(");
		boolean first = true;

		sb.append("userMap:");
		sb.append(this.userMap);
		first = false;
		if (!first) sb.append(", ");
		sb.append("xtructs:");
		sb.append(this.xtructs);
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
			read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class InsanityStandardScheme extends StandardScheme<Insanity> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, Insanity struct) throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
					case 1: // USER_MAP
						if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
							org.apache.thrift.protocol.TMap elem15 = iprot.readMapBegin();
							struct.userMap = new HashMap<Numberz,Long>(2*elem15.size);
							for (int elem16 = 0; elem16 < elem15.size; ++elem16) {
								Numberz elem18 = Numberz.findByValue(iprot.readI32());
								long elem17 = iprot.readI64();
								struct.userMap.put(elem18, elem17);
							}
							iprot.readMapEnd();
							struct.setUserMapIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // XTRUCTS
						if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
							org.apache.thrift.protocol.TList elem19 = iprot.readListBegin();
							struct.xtructs = new ArrayList<Xtruct>(elem19.size);
							for (int elem20 = 0; elem20 < elem19.size; ++elem20) {
								Xtruct elem21 = new Xtruct();
								elem21.read(iprot);
								struct.xtructs.add(elem21);
							}
							iprot.readListEnd();
							struct.setXtructsIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, Insanity struct) throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.isSetUserMap()) {
				oprot.writeFieldBegin(USER_MAP_FIELD_DESC);
				oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I64, struct.userMap.size()));
				for (Map.Entry<Numberz, Long> elem22 : struct.userMap.entrySet()) {
					Numberz elem23 = elem22.getKey();
					oprot.writeI32(elem23.getValue());
					long elem24 = elem22.getValue();
					oprot.writeI64(elem24);
				}
				oprot.writeMapEnd();
				oprot.writeFieldEnd();
			}
			if (struct.isSetXtructs()) {
				oprot.writeFieldBegin(XTRUCTS_FIELD_DESC);
				oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.xtructs.size()));
				for (Xtruct elem25 : struct.xtructs) {
					elem25.write(oprot);
				}
				oprot.writeListEnd();
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

}
