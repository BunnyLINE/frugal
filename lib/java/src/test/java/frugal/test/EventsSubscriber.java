/**
 * Autogenerated by Frugal Compiler (3.14.1)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */

package frugal.test;

import com.workiva.frugal.FContext;
import com.workiva.frugal.exception.TApplicationExceptionType;
import com.workiva.frugal.middleware.InvocationHandler;
import com.workiva.frugal.middleware.ServiceMiddleware;
import com.workiva.frugal.protocol.*;
import com.workiva.frugal.provider.FScopeProvider;
import com.workiva.frugal.transport.FPublisherTransport;
import com.workiva.frugal.transport.FSubscriberTransport;
import com.workiva.frugal.transport.FSubscription;
import com.workiva.frugal.transport.TMemoryOutputBuffer;
import org.apache.thrift.TException;
import org.apache.thrift.TApplicationException;
import org.apache.thrift.transport.TTransport;
import org.apache.thrift.transport.TTransportException;
import org.apache.thrift.protocol.*;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;




public class EventsSubscriber {

	public interface Iface {
		public FSubscription subscribeEventCreated(String preamble, String ramble, String role, String RID, final EventCreatedHandler handler) throws TException;

	}

	public interface IfaceThrowable {
		public FSubscription subscribeEventCreatedThrowable(String preamble, String ramble, String role, String RID, final EventCreatedThrowableHandler handler) throws TException;

	}

	public interface EventCreatedHandler {
		void onEventCreated(FContext ctx, Event req) throws TException;
	}

	public interface EventCreatedThrowableHandler {
		void onEventCreated(FContext ctx, Event req) throws TException;
	}

	public static class Client implements Iface, IfaceThrowable {
		private static final String DELIMITER = ".";
		private static final Logger LOGGER = LoggerFactory.getLogger(Client.class);

		private final FScopeProvider provider;
		private final ServiceMiddleware[] middleware;

		public Client(FScopeProvider provider, ServiceMiddleware... middleware) {
			this.provider = provider;
			List<ServiceMiddleware> combined = new ArrayList<ServiceMiddleware>(Arrays.asList(middleware));
			combined.addAll(provider.getMiddleware());
			this.middleware = combined.toArray(new ServiceMiddleware[0]);
		}

		public FSubscription subscribeEventCreated(String preamble, String ramble, String role, String RID, final EventCreatedHandler handler) throws TException {
			final String op = "EventCreated";
			String prefix = String.format("%s.%s.%s.%s.", preamble, ramble, role, RID);
			final String topic = String.format("%sEvents%s%s", prefix, DELIMITER, op);
			final FScopeProvider.Subscriber subscriber = provider.buildSubscriber();
			final FSubscriberTransport transport = subscriber.getTransport();
			final EventCreatedHandler proxiedHandler = InvocationHandler.composeMiddleware(handler, EventCreatedHandler.class, middleware);
			transport.subscribe(topic, recvEventCreated(op, subscriber.getProtocolFactory(), proxiedHandler));
			return FSubscription.of(topic, transport);
		}

		private FAsyncCallback recvEventCreated(String op, FProtocolFactory pf, EventCreatedHandler handler) {
			return new FAsyncCallback() {
				public void onMessage(TTransport tr) throws TException {
					FProtocol iprot = pf.getProtocol(tr);
					FContext ctx = iprot.readRequestHeader();
					TMessage msg = iprot.readMessageBegin();
					if (!msg.name.equals(op)) {
						TProtocolUtil.skip(iprot, TType.STRUCT);
						iprot.readMessageEnd();
						throw new TApplicationException(TApplicationExceptionType.UNKNOWN_METHOD);
					}
					Event received = new Event();
					received.read(iprot);
					iprot.readMessageEnd();
					handler.onEventCreated(ctx, received);
				}
			};
		}

		public FSubscription subscribeEventCreatedThrowable(String preamble, String ramble, String role, String RID, final EventCreatedThrowableHandler handler) throws TException {
			final String op = "EventCreated";
			String prefix = String.format("%s.%s.%s.%s.", preamble, ramble, role, RID);
			final String topic = String.format("%sEvents%s%s", prefix, DELIMITER, op);
			final FScopeProvider.Subscriber subscriber = provider.buildSubscriber();
			final FSubscriberTransport transport = subscriber.getTransport();
			final EventCreatedThrowableHandler proxiedHandler = InvocationHandler.composeMiddleware(handler, EventCreatedThrowableHandler.class, middleware);
			transport.subscribe(topic, recvEventCreated(op, subscriber.getProtocolFactory(), proxiedHandler));
			return FSubscription.of(topic, transport);
		}

		private FAsyncCallback recvEventCreated(String op, FProtocolFactory pf, EventCreatedThrowableHandler handler) {
			return new FAsyncCallback() {
				public void onMessage(TTransport tr) throws TException {
					FProtocol iprot = pf.getProtocol(tr);
					FContext ctx = iprot.readRequestHeader();
					TMessage msg = iprot.readMessageBegin();
					if (!msg.name.equals(op)) {
						TProtocolUtil.skip(iprot, TType.STRUCT);
						iprot.readMessageEnd();
						throw new TApplicationException(TApplicationExceptionType.UNKNOWN_METHOD);
					}
					Event received = new Event();
					received.read(iprot);
					iprot.readMessageEnd();
					handler.onEventCreated(ctx, received);
				}
			};
		}
	}

}
