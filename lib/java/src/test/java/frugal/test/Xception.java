/**
 * Autogenerated by Frugal Compiler (3.14.1)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package frugal.test;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Objects;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Xception extends TException implements org.apache.thrift.TBase<Xception, Xception._Fields>, java.io.Serializable, Cloneable, Comparable<Xception> {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Xception");

	private static final org.apache.thrift.protocol.TField ERROR_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("errorCode", org.apache.thrift.protocol.TType.I32, (short)1);
	private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)2);

	public int errorCode;
	public String message;
	/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		ERROR_CODE((short)1, "errorCode"),
		MESSAGE((short)2, "message")
		;

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch(fieldId) {
				case 1: // ERROR_CODE
					return ERROR_CODE;
				case 2: // MESSAGE
					return MESSAGE;
				default:
					return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	private static final int __ERRORCODE_ISSET_ID = 0;
	private byte __isset_bitfield = 0;
	public Xception() {
	}

	public Xception(
		int errorCode,
		String message) {
		this();
		this.errorCode = errorCode;
		setErrorCodeIsSet(true);
		this.message = message;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public Xception(Xception other) {
		__isset_bitfield = other.__isset_bitfield;
		this.errorCode = other.errorCode;
		if (other.isSetMessage()) {
			this.message = other.message;
		}
	}

	public Xception deepCopy() {
		return new Xception(this);
	}

	@Override
	public void clear() {
		setErrorCodeIsSet(false);
		this.errorCode = 0;

		this.message = null;

	}

	public int getErrorCode() {
		return this.errorCode;
	}

	public Xception setErrorCode(int errorCode) {
		this.errorCode = errorCode;
		setErrorCodeIsSet(true);
		return this;
	}

	public void unsetErrorCode() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ERRORCODE_ISSET_ID);
	}

	/** Returns true if field errorCode is set (has been assigned a value) and false otherwise */
	public boolean isSetErrorCode() {
		return EncodingUtils.testBit(__isset_bitfield, __ERRORCODE_ISSET_ID);
	}

	public void setErrorCodeIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ERRORCODE_ISSET_ID, value);
	}

	public String getMessage() {
		return this.message;
	}

	public Xception setMessage(String message) {
		this.message = message;
		return this;
	}

	public void unsetMessage() {
		this.message = null;
	}

	/** Returns true if field message is set (has been assigned a value) and false otherwise */
	public boolean isSetMessage() {
		return this.message != null;
	}

	public void setMessageIsSet(boolean value) {
		if (!value) {
			this.message = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case ERROR_CODE:
			if (value == null) {
				unsetErrorCode();
			} else {
				setErrorCode((Integer)value);
			}
			break;

		case MESSAGE:
			if (value == null) {
				unsetMessage();
			} else {
				setMessage((String)value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case ERROR_CODE:
			return getErrorCode();

		case MESSAGE:
			return getMessage();

		}
		throw new IllegalStateException();
	}

	/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case ERROR_CODE:
			return isSetErrorCode();
		case MESSAGE:
			return isSetMessage();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof Xception)
			return this.equals((Xception)that);
		return false;
	}

	public boolean equals(Xception that) {
		if (that == null)
			return false;
		if (this.errorCode != that.errorCode)
			return false;
		if (!Objects.equals(this.message, that.message))
			return false;
		return true;
	}

	@Override
	public int hashCode() {
		List<Object> list = new ArrayList<Object>();

		boolean present_errorCode = true;
		list.add(present_errorCode);
		if (present_errorCode)
			list.add(errorCode);

		boolean present_message = true && (isSetMessage());
		list.add(present_message);
		if (present_message)
			list.add(message);

		return list.hashCode();
	}

	@Override
	public int compareTo(Xception other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = Boolean.compare(isSetErrorCode(), other.isSetErrorCode());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetErrorCode()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorCode, other.errorCode);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.compare(isSetMessage(), other.isSetMessage());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetMessage()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		if (iprot.getScheme() != StandardScheme.class) {
			throw new UnsupportedOperationException();
		}
		new XceptionStandardScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		if (oprot.getScheme() != StandardScheme.class) {
			throw new UnsupportedOperationException();
		}
		new XceptionStandardScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("Xception(");
		boolean first = true;

		sb.append("errorCode:");
		sb.append(this.errorCode);
		first = false;
		if (!first) sb.append(", ");
		sb.append("message:");
		sb.append(this.message);
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class XceptionStandardScheme extends StandardScheme<Xception> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, Xception struct) throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
					case 1: // ERROR_CODE
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.errorCode = iprot.readI32();
							struct.setErrorCodeIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // MESSAGE
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.message = iprot.readString();
							struct.setMessageIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, Xception struct) throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			oprot.writeFieldBegin(ERROR_CODE_FIELD_DESC);
			int elem26 = struct.errorCode;
			oprot.writeI32(elem26);
			oprot.writeFieldEnd();
			if (struct.isSetMessage()) {
				oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
				String elem27 = struct.message;
				oprot.writeString(elem27);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

}
