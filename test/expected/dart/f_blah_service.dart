// Autogenerated by Frugal Compiler (0.0.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

library valid.src.f_blah_scope;

import 'dart:async';

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart' as thrift;
import 'package:frugal/frugal.dart' as frugal;

import 'thing.dart' as t_thing;
import 'stuff.dart' as t_stuff;
import 'blah.dart' as t_blah;


abstract class FBlah {

  /// Use this to ping the server.
  Future ping(frugal.Context ctx);

  /// Use this to tell the sever how you feel.
  Future<int> bleh(frugal.Context ctx, t_thing.Thing one, t_stuff.Stuff two);
}

class FBlahClient implements FBlah {

  FBlahClient(thrift.TProtocol iprot, [thrift.TProtocol oprot = null]) {
    _iprot = iprot;
    _oprot = (oprot == null) ? iprot : oprot;
  }

  frugal.FProtocol _iprot;

  frugal.FProtocol get iprot => _iprot;

  frugal.FProtocol _oprot;

  frugal.FProtocol get oprot => _oprot;

  int _seqid = 0;

  int get seqid => _seqid;

  int nextSeqid() => ++_seqid;

  /// Use this to ping the server.
  Future ping(frugal.Context ctx) async {
    oprot.writeRequestHeader(ctx);
    oprot.writeMessageBegin(new thrift.TMessage("ping", thrift.TMessageType.CALL, nextSeqid()));
    t_blah.ping_args args = new t_blah.ping_args();
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    iprot.readResponseHeader(ctx);
    thrift.TMessage msg = iprot.readMessageBegin();
    if (msg.type == thrift.TMessageType.EXCEPTION) {
      thrift.TApplicationError error = thrift.TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    t_blah.ping_result result = new t_blah.ping_result();
    result.read(iprot);
    iprot.readMessageEnd();
    return;
  }

  /// Use this to tell the sever how you feel.
  Future<int> bleh(frugal.Context ctx, t_thing.Thing one, t_stuff.Stuff two) async {
    oprot.writeRequestHeader(ctx);
    oprot.writeMessageBegin(new thrift.TMessage("bleh", thrift.TMessageType.CALL, nextSeqid()));
    t_blah.bleh_args args = new t_blah.bleh_args();
    args.one = one;
    args.two = two;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    iprot.readResponseHeader(ctx);
    thrift.TMessage msg = iprot.readMessageBegin();
    if (msg.type == thrift.TMessageType.EXCEPTION) {
      thrift.TApplicationError error = thrift.TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    t_blah.bleh_result result = new t_blah.bleh_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    throw new thrift.TApplicationError(thrift.TApplicationErrorType.MISSING_RESULT, "bleh failed: unknown result");
  }

}
