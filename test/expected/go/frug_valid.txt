// Autogenerated by Frugal Compiler (0.0.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package valid

import (
	"bytes"
	"fmt"
	"log"

	"git.apache.org/thrift.git/lib/go/thrift"
	"github.com/Workiva/frugal-go"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal


const delimiter = "."

// And this is a scope docstring.
type FooPublisher struct {
	Transport frugal.Transport
	Protocol  thrift.TProtocol
	SeqId     int32
}

func NewFooPublisher(provider *frugal.Provider) *FooPublisher {
	transport, protocol := provider.New()
	return &FooPublisher{
		Transport: transport,
		Protocol:  protocol,
		SeqId:     0,
	}
}

func (l *FooPublisher) PublishFoo(baz string, req *Thing) error {
	op := "Foo"
	prefix := fmt.Sprintf("foo.bar.%s.qux.", baz)
	topic := fmt.Sprintf("%sFoo%s%s", prefix, delimiter, op)
	l.Transport.PreparePublish(topic)
	oprot := l.Protocol
	l.SeqId++
	if err := oprot.WriteMessageBegin(op, thrift.CALL, l.SeqId); err != nil {
		return err
	}
	if err := req.Write(oprot); err != nil {
		return err
	}
	if err := oprot.WriteMessageEnd(); err != nil {
		return err
	}
	return oprot.Flush()
}

<<<<<<< HEAD
func (l *FooPublisher) PublishBar(baz string, req *Stuff) error {
	op := "Bar"
=======
// This is an operation docstring.
func (l *FooPublisher) PublishFoo(baz string, req *Thing) error {
	op := "Foo"
>>>>>>> f9437bcd253b3b469f34e48af9202b19d5a276f6
	prefix := fmt.Sprintf("foo.bar.%s.qux.", baz)
	topic := fmt.Sprintf("%sFoo%s%s", prefix, delimiter, op)
	l.Transport.PreparePublish(topic)
	oprot := l.Protocol
	l.SeqId++
	if err := oprot.WriteMessageBegin(op, thrift.CALL, l.SeqId); err != nil {
		return err
	}
	if err := req.Write(oprot); err != nil {
		return err
	}
	if err := oprot.WriteMessageEnd(); err != nil {
		return err
	}
	return oprot.Flush()
}

type BarPublisher struct {
	Transport frugal.Transport
	Protocol  thrift.TProtocol
	SeqId     int32
}

func NewBarPublisher(provider *frugal.Provider) *BarPublisher {
	transport, protocol := provider.New()
	return &BarPublisher{
		Transport: transport,
		Protocol:  protocol,
		SeqId:     0,
	}
}

func (l *BarPublisher) PublishDoStuff(req *Thing) error {
	op := "DoStuff"
	prefix := ""
	topic := fmt.Sprintf("%sBar%s%s", prefix, delimiter, op)
	l.Transport.PreparePublish(topic)
	oprot := l.Protocol
	l.SeqId++
	if err := oprot.WriteMessageBegin(op, thrift.CALL, l.SeqId); err != nil {
		return err
	}
	if err := req.Write(oprot); err != nil {
		return err
	}
	if err := oprot.WriteMessageEnd(); err != nil {
		return err
	}
	return oprot.Flush()
}

// And this is a scope docstring.
type FooSubscriber struct {
	Provider *frugal.Provider
}

func NewFooSubscriber(provider *frugal.Provider) *FooSubscriber {
	return &FooSubscriber{Provider: provider}
}

func (l *FooSubscriber) SubscribeFoo(baz string, handler func(*Thing)) (*frugal.Subscription, error) {
	op := "Foo"
	prefix := fmt.Sprintf("foo.bar.%s.qux.", baz)
	topic := fmt.Sprintf("%sFoo%s%s", prefix, delimiter, op)
	transport, protocol := l.Provider.New()
	if err := transport.Subscribe(topic); err != nil {
		return nil, err
	}

	sub := frugal.NewSubscription(topic, transport)
	go func() {
		for {
			received, err := l.recvFoo(op, protocol)
			if err != nil {
				if e, ok := err.(thrift.TTransportException); ok && e.TypeId() == thrift.END_OF_FILE {
					return
				}
				log.Println("frugal: error receiving:", err)
				sub.Signal(err)
				sub.Unsubscribe()
				return
			}
			handler(received)
		}
	}()

	return sub, nil
}

func (l *FooSubscriber) recvFoo(op string, iprot thrift.TProtocol) (*Thing, error) {
	name, _, _, err := iprot.ReadMessageBegin()
	if err != nil {
		return nil, err
	}
	if name != op {
		iprot.Skip(thrift.STRUCT)
		iprot.ReadMessageEnd()
		x9 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
		return nil, x9
	}
	req := &Thing{}
	if err := req.Read(iprot); err != nil {
		return nil, err
	}

	iprot.ReadMessageEnd()
	return req, nil
}

<<<<<<< HEAD


func (l *FooSubscriber) SubscribeBar(baz string, handler func(*Stuff)) (*frugal.Subscription, error) {
	op := "Bar"
=======
// This is an operation docstring.
func (l *FooSubscriber) SubscribeFoo(baz string, handler func(*Thing)) (*frugal.Subscription, error) {
	op := "Foo"
>>>>>>> f9437bcd253b3b469f34e48af9202b19d5a276f6
	prefix := fmt.Sprintf("foo.bar.%s.qux.", baz)
	topic := fmt.Sprintf("%sFoo%s%s", prefix, delimiter, op)
	transport, protocol := l.Provider.New()
	if err := transport.Subscribe(topic); err != nil {
		return nil, err
	}

	sub := frugal.NewSubscription(topic, transport)
	go func() {
		for {
			received, err := l.recvBar(op, protocol)
			if err != nil {
				if e, ok := err.(thrift.TTransportException); ok && e.TypeId() == thrift.END_OF_FILE {
					return
				}
				log.Println("frugal: error receiving:", err)
				sub.Signal(err)
				sub.Unsubscribe()
				return
			}
			handler(received)
		}
	}()

	return sub, nil
}

func (l *FooSubscriber) recvBar(op string, iprot thrift.TProtocol) (*Stuff, error) {
	name, _, _, err := iprot.ReadMessageBegin()
	if err != nil {
		return nil, err
	}
	if name != op {
		iprot.Skip(thrift.STRUCT)
		iprot.ReadMessageEnd()
		x9 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
		return nil, x9
	}
	req := &Stuff{}
	if err := req.Read(iprot); err != nil {
		return nil, err
	}

	iprot.ReadMessageEnd()
	return req, nil
}



type BarSubscriber struct {
	Provider *frugal.Provider
}

func NewBarSubscriber(provider *frugal.Provider) *BarSubscriber {
	return &BarSubscriber{Provider: provider}
}

func (l *BarSubscriber) SubscribeDoStuff(handler func(*Thing)) (*frugal.Subscription, error) {
	op := "DoStuff"
	prefix := ""
	topic := fmt.Sprintf("%sBar%s%s", prefix, delimiter, op)
	transport, protocol := l.Provider.New()
	if err := transport.Subscribe(topic); err != nil {
		return nil, err
	}

	sub := frugal.NewSubscription(topic, transport)
	go func() {
		for {
			received, err := l.recvDoStuff(op, protocol)
			if err != nil {
				if e, ok := err.(thrift.TTransportException); ok && e.TypeId() == thrift.END_OF_FILE {
					return
				}
				log.Println("frugal: error receiving:", err)
				sub.Signal(err)
				sub.Unsubscribe()
				return
			}
			handler(received)
		}
	}()

	return sub, nil
}

func (l *BarSubscriber) recvDoStuff(op string, iprot thrift.TProtocol) (*Thing, error) {
	name, _, _, err := iprot.ReadMessageBegin()
	if err != nil {
		return nil, err
	}
	if name != op {
		iprot.Skip(thrift.STRUCT)
		iprot.ReadMessageEnd()
		x9 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
		return nil, x9
	}
	req := &Thing{}
	if err := req.Read(iprot); err != nil {
		return nil, err
	}

	iprot.ReadMessageEnd()
	return req, nil
<<<<<<< HEAD
}

type FrugalBlah interface {
	Ping(frugal.Context) (err error)
	Bleh(frugal.Context, *Thing, *Stuff) (r int64, err error)
}

type FrugalBlahClient struct {
	Transport       thrift.TTransport
	ProtocolFactory frugal.FProtocolFactory
	InputProtocol   frugal.FProtocol
	OutputProtocol  frugal.FProtocol
	SeqId           int32
}

func NewFrugalBlahClientFactory(t thrift.TTransport, f frugal.FProtocolFactory) *FrugalBlahClient {
	return &FrugalBlahClient{
		Transport:       t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewFrugalBlahClientProtocol(t thrift.TTransport, iprot, oprot frugal.FProtocol) *FrugalBlahClient {
	return &FrugalBlahClient{
		Transport:       t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

func (f *FrugalBlahClient) Ping(ctx frugal.Context) (err error) {
	if err = f.sendPing(ctx, ); err != nil {
		return
	}
	return f.recvPing(ctx)
}

func (f *FrugalBlahClient) sendPing(ctx frugal.Context) (err error) {
	oprot := f.OutputProtocol
	if oprot == nil {
		oprot = f.ProtocolFactory.GetProtocol(f.Transport)
		f.OutputProtocol = oprot
	}
	if err = f.OutputProtocol.WriteRequestHeader(ctx); err != nil {
		return
	}
	f.SeqId++
	if err = oprot.WriteMessageBegin("ping", thrift.CALL, f.SeqId); err != nil {
		return
	}
	args := BlahPingArgs{
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (f *FrugalBlahClient) recvPing(ctx frugal.Context) (err error) {
	iprot := f.InputProtocol
	if iprot == nil {
		iprot = f.ProtocolFactory.GetProtocol(f.Transport)
		f.InputProtocol = iprot
	}
	if err = iprot.ReadResponseHeader(ctx); err != nil {
		return
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "ping" {
	err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "ping failed: wrong method name")
		return
	}
	if f.SeqId != seqId {
	err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error1 error
		error1, err = error0.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error1
		return
	}
	if mTypeId != thrift.REPLY {
	err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "ping failed: invalid message type")
		return
	}
	result := BlahPingResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	return
}

func (f *FrugalBlahClient) Bleh(ctx frugal.Context, one *Thing, two *Stuff) (r int64, err error) {
	if err = f.sendBleh(ctx, one, two); err != nil {
		return
	}
	return f.recvBleh(ctx)
}

func (f *FrugalBlahClient) sendBleh(ctx frugal.Context, one *Thing, two *Stuff) (err error) {
	oprot := f.OutputProtocol
	if oprot == nil {
		oprot = f.ProtocolFactory.GetProtocol(f.Transport)
		f.OutputProtocol = oprot
	}
	if err = f.OutputProtocol.WriteRequestHeader(ctx); err != nil {
		return
	}
	f.SeqId++
	if err = oprot.WriteMessageBegin("bleh", thrift.CALL, f.SeqId); err != nil {
		return
	}
	args := BlahBlehArgs{
		One: one,
		Two: two,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (f *FrugalBlahClient) recvBleh(ctx frugal.Context) (r int64, err error) {
	iprot := f.InputProtocol
	if iprot == nil {
		iprot = f.ProtocolFactory.GetProtocol(f.Transport)
		f.InputProtocol = iprot
	}
	if err = iprot.ReadResponseHeader(ctx); err != nil {
		return
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "bleh" {
	err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "bleh failed: wrong method name")
		return
	}
	if f.SeqId != seqId {
	err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "bleh failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error1 error
		error1, err = error0.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error1
		return
	}
	if mTypeId != thrift.REPLY {
	err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "bleh failed: invalid message type")
		return
	}
	result := BlahBlehResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Oops != nil {
		err = result.Oops
		return
	}
	r = result.GetSuccess()
	return
}

type FrugalBlahProcessor struct {
	processorMap map[string]frugal.FProcessorFunction
	handler      FrugalBlah
}

func (p *FrugalBlahProcessor) GetProcessorFunction(key string) (processor frugal.FProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return
}

func NewFrugalBlahProcessor(handler FrugalBlah) *FrugalBlahProcessor {
	p := &FrugalBlahProcessor{
		handler:      handler,
		processorMap: make(map[string]frugal.FProcessorFunction),
	}
	p.processorMap["ping"] = &blahFrugalProcessorPing{handler: handler}
	p.processorMap["bleh"] = &blahFrugalProcessorBleh{handler: handler}
	return p
}

func (p *FrugalBlahProcessor) Process(iprot, oprot frugal.FProtocol) (success bool, err thrift.TException) {
	ctx, err := iprot.ReadRequestHeader()
	if err != nil {
		return false, err
	}
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x3 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x3.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x3
}

type blahFrugalProcessorPing struct {
	handler FrugalBlah
}

func (p *blahFrugalProcessorPing) Process(ctx frugal.Context, seqId int32, iprot, oprot frugal.FProtocol) (success bool, err thrift.TException) {
	args := BlahPingArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ping", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BlahPingResult{}
	var err2 error
	if err2 = p.handler.Ping(ctx, ); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ping: "+err2.Error())
		oprot.WriteMessageBegin("ping", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	}
	if err2 = oprot.WriteResponseHeader(ctx); err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageBegin("ping", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type blahFrugalProcessorBleh struct {
	handler FrugalBlah
}

func (p *blahFrugalProcessorBleh) Process(ctx frugal.Context, seqId int32, iprot, oprot frugal.FProtocol) (success bool, err thrift.TException) {
	args := BlahBlehArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("bleh", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BlahBlehResult{}
	var err2 error
	var retval int64
	if retval, err2 = p.handler.Bleh(ctx, args.One, args.Two); err2 != nil {
		switch v := err2.(type) {
		case *InvalidOperation:
			result.Oops = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bleh: "+err2.Error())
			oprot.WriteMessageBegin("bleh", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteResponseHeader(ctx); err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageBegin("bleh", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

=======
}
>>>>>>> f9437bcd253b3b469f34e48af9202b19d5a276f6
