// Autogenerated by Frugal Compiler (0.0.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package valid

import (
	"fmt"
	"log"

	"git.apache.org/thrift.git/lib/go/thrift"
	"github.com/Workiva/frugal-go"
)

const delimiter = "."

// And this is a scope docstring.
type FooPublisher struct {
	FTransport frugal.FScopeTransport
	FProtocol  *frugal.FProtocol
}

func NewFooPublisher(provider *frugal.FProvider) *FooPublisher {
	transport, protocol := provider.New()
	return &FooPublisher{
		FTransport: transport,
		FProtocol:  protocol,
	}
}

func (l *FooPublisher) Open() error {
	return l.FTransport.Open()
}

func (l *FooPublisher) Close() error {
	return l.FTransport.Close()
}

// This is an operation docstring.
func (l *FooPublisher) PublishFoo(baz string, req *Thing) error {
	op := "Foo"
	prefix := fmt.Sprintf("foo.bar.%s.qux.", baz)
	topic := fmt.Sprintf("%sFoo%s%s", prefix, delimiter, op)
	if err := l.FTransport.LockTopic(topic); err != nil {
		return err
	}
	defer l.FTransport.UnlockTopic()
	oprot := l.FProtocol
	if err := oprot.WriteMessageBegin(op, thrift.CALL, 0); err != nil {
		return err
	}
	if err := req.Write(oprot); err != nil {
		return err
	}
	if err := oprot.WriteMessageEnd(); err != nil {
		return err
	}
	return oprot.Flush()
}

func (l *FooPublisher) PublishBar(baz string, req *Stuff) error {
	op := "Bar"
	prefix := fmt.Sprintf("foo.bar.%s.qux.", baz)
	topic := fmt.Sprintf("%sFoo%s%s", prefix, delimiter, op)
	if err := l.FTransport.LockTopic(topic); err != nil {
		return err
	}
	defer l.FTransport.UnlockTopic()
	oprot := l.FProtocol
	if err := oprot.WriteMessageBegin(op, thrift.CALL, 0); err != nil {
		return err
	}
	if err := req.Write(oprot); err != nil {
		return err
	}
	if err := oprot.WriteMessageEnd(); err != nil {
		return err
	}
	return oprot.Flush()
}

// And this is a scope docstring.
type FooSubscriber struct {
	Provider *frugal.FProvider
}

func NewFooSubscriber(provider *frugal.FProvider) *FooSubscriber {
	return &FooSubscriber{Provider: provider}
}

// This is an operation docstring.
func (l *FooSubscriber) SubscribeFoo(baz string, handler func(*Thing)) (*frugal.FSubscription, error) {
	op := "Foo"
	prefix := fmt.Sprintf("foo.bar.%s.qux.", baz)
	topic := fmt.Sprintf("%sFoo%s%s", prefix, delimiter, op)
	transport, protocol := l.Provider.New()
	if err := transport.Subscribe(topic); err != nil {
		return nil, err
	}

	sub := frugal.NewFSubscription(topic, transport)
	go func() {
		for {
			received, err := l.recvFoo(op, protocol)
			if err != nil {
				if e, ok := err.(thrift.TTransportException); ok && e.TypeId() == thrift.END_OF_FILE {
					return
				}
				log.Printf("frugal: error receiving %s: %s\n", topic, err.Error())
				sub.Signal(err)
				sub.Unsubscribe()
				return
			}
			handler(received)
		}
	}()

	return sub, nil
}

func (l *FooSubscriber) recvFoo(op string, iprot thrift.TProtocol) (*Thing, error) {
	name, _, _, err := iprot.ReadMessageBegin()
	if err != nil {
		return nil, err
	}
	if name != op {
		iprot.Skip(thrift.STRUCT)
		iprot.ReadMessageEnd()
		x9 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
		return nil, x9
	}
	req := &Thing{}
	if err := req.Read(iprot); err != nil {
		return nil, err
	}

	iprot.ReadMessageEnd()
	return req, nil
}

func (l *FooSubscriber) SubscribeBar(baz string, handler func(*Stuff)) (*frugal.FSubscription, error) {
	op := "Bar"
	prefix := fmt.Sprintf("foo.bar.%s.qux.", baz)
	topic := fmt.Sprintf("%sFoo%s%s", prefix, delimiter, op)
	transport, protocol := l.Provider.New()
	if err := transport.Subscribe(topic); err != nil {
		return nil, err
	}

	sub := frugal.NewFSubscription(topic, transport)
	go func() {
		for {
			received, err := l.recvBar(op, protocol)
			if err != nil {
				if e, ok := err.(thrift.TTransportException); ok && e.TypeId() == thrift.END_OF_FILE {
					return
				}
				log.Printf("frugal: error receiving %s: %s\n", topic, err.Error())
				sub.Signal(err)
				sub.Unsubscribe()
				return
			}
			handler(received)
		}
	}()

	return sub, nil
}

func (l *FooSubscriber) recvBar(op string, iprot thrift.TProtocol) (*Stuff, error) {
	name, _, _, err := iprot.ReadMessageBegin()
	if err != nil {
		return nil, err
	}
	if name != op {
		iprot.Skip(thrift.STRUCT)
		iprot.ReadMessageEnd()
		x9 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
		return nil, x9
	}
	req := &Stuff{}
	if err := req.Read(iprot); err != nil {
		return nil, err
	}

	iprot.ReadMessageEnd()
	return req, nil
}
