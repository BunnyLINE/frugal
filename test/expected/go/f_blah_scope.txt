// Autogenerated by Frugal Compiler (0.0.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package valid

import (
	"fmt"
	"log"

	"git.apache.org/thrift.git/lib/go/thrift"
	"github.com/Workiva/frugal-go"
)



type BlahPublisher struct {
	FTransport frugal.FTransport
	TProtocol  thrift.TProtocol
	SeqId     int32
}

func NewBlahPublisher(provider *frugal.Provider) *BlahPublisher {
	transport, protocol := provider.New()
	return &BlahPublisher{
		FTransport: transport,
		TProtocol:  protocol,
		SeqId:     0,
	}
}

func (l *BlahPublisher) PublishDoStuff(req *Thing) error {
	op := "DoStuff"
	prefix := ""
	topic := fmt.Sprintf("%sBlah%s%s", prefix, delimiter, op)
	l.FTransport.PreparePublish(topic)
	oprot := l.TProtocol
	l.SeqId++
	if err := oprot.WriteMessageBegin(op, thrift.CALL, l.SeqId); err != nil {
		return err
	}
	if err := req.Write(oprot); err != nil {
		return err
	}
	if err := oprot.WriteMessageEnd(); err != nil {
		return err
	}
	return oprot.Flush()
}

type BlahSubscriber struct {
	Provider *frugal.Provider
}

func NewBlahSubscriber(provider *frugal.Provider) *BlahSubscriber {
	return &BlahSubscriber{Provider: provider}
}

func (l *BlahSubscriber) SubscribeDoStuff(handler func(*Thing)) (*frugal.Subscription, error) {
	op := "DoStuff"
	prefix := ""
	topic := fmt.Sprintf("%sBlah%s%s", prefix, delimiter, op)
	transport, protocol := l.Provider.New()
	if err := transport.Subscribe(topic); err != nil {
		return nil, err
	}

	sub := frugal.NewSubscription(topic, transport)
	go func() {
		for {
			received, err := l.recvDoStuff(op, protocol)
			if err != nil {
				if e, ok := err.(thrift.TTransportException); ok && e.TypeId() == thrift.END_OF_FILE {
					return
				}
				log.Println("frugal: error receiving:", err)
				sub.Signal(err)
				sub.Unsubscribe()
				return
			}
			handler(received)
		}
	}()

	return sub, nil
}

func (l *BlahSubscriber) recvDoStuff(op string, iprot thrift.TProtocol) (*Thing, error) {
	name, _, _, err := iprot.ReadMessageBegin()
	if err != nil {
		return nil, err
	}
	if name != op {
		iprot.Skip(thrift.STRUCT)
		iprot.ReadMessageEnd()
		x9 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
		return nil, x9
	}
	req := &Thing{}
	if err := req.Read(iprot); err != nil {
		return nil, err
	}

	iprot.ReadMessageEnd()
	return req, nil
}
