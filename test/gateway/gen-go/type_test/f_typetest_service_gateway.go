// Autogenerated by Frugal Compiler (2.14.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package type_test

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"reflect"
	"strings"

	"git.apache.org/thrift.git/lib/go/thrift"
	"github.com/Sirupsen/logrus"
	"github.com/Workiva/frugal/lib/gateway"
	"github.com/Workiva/frugal/lib/go"
	"github.com/gorilla/mux"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal
var _ = logrus.DebugLevel

// RegisterTypeTestServiceHandler routes requests to the underlying Frugal client
func RegisterTypeTestServiceHandler(marshaler gateway.Marshaler, router *gateway.Router, client *FTypeTestClient) error {

	router.HandleFunc("/{boolTest}/", func(w http.ResponseWriter, req *http.Request) {
		f, _ := w.(http.Flusher)
		w.Header().Set("Content-Type", marshaler.ContentType())
		var mapping BaseTypeJSONMapping
		decoder := marshaler.NewDecoder(req.Body)
		defer req.Body.Close()
		err := decoder.Decode(&mapping)
		if err != nil && err != io.EOF {
			if e, ok := err.(*json.UnmarshalTypeError); ok {
				w.WriteHeader(http.StatusUnprocessableEntity)
				response := &ErrorResponse{
					Message: "Validation failed",
					Errors: []*Error{
						&Error{
							Resource: "album",
							Field:    e.Field,
							Code:     "invalid",
						},
					},
				}
				buf, err := marshaler.Marshal(response)
				if err != nil {
					buf = []byte("{ \"message\": \"Validation failed\" }")
				}
				w.Write(buf)
				fmt.Println(e)
				return
			}
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Problems parsing JSON\" }")
			w.Write(buf)
			fmt.Println(err)
			return
		}

		payload := &BaseType{}
		s := reflect.ValueOf(&mapping).Elem()
		typeOfMapping := s.Type()
		vars := mux.Vars(req)
		for k, v := range vars {
			varField := strings.ToLower(k)
			for i := 0; i < s.NumField(); i++ {
				structField := strings.ToLower(typeOfMapping.Field(i).Name)
				if varField == structField {
					s.Field(i).Set(reflect.ValueOf(&v))
					continue
				}
			}
		}
		s = reflect.ValueOf(&mapping).Elem()
		typeOfMapping = s.Type()
		queries := req.URL.Query()
		for k, v := range queries {
			varField := strings.ToLower(k)
			for i := 0; i < s.NumField(); i++ {
				structField := strings.ToLower(typeOfMapping.Field(i).Name)
				if varField == structField {
					if len(v) == 1 {
						s.Field(i).Set(reflect.ValueOf(&v[0]))
					} else {
						s.Field(i).Set(reflect.ValueOf(&v[0]))
					}
					continue
				}
			}
		}
		if mapping.BoolTest == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.BoolTest = mapping.BoolTest
		if mapping.ByteTest == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.ByteTest = mapping.ByteTest
		if mapping.I16Test == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.I16Test = mapping.I16Test
		if mapping.I32Test == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.I32Test = mapping.I32Test
		if mapping.I64Test == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.I64Test = mapping.I64Test
		if mapping.DoubleTest == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.DoubleTest = mapping.DoubleTest
		if mapping.BinaryTest == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.BinaryTest = mapping.BinaryTest
		if mapping.StringTest == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.StringTest = mapping.StringTest
		response, err := client.GetBoolArgument(frugal.NewFContext(""), payload)
		if err != nil {
			gateway.DefaultFrugalErrorHandler(marshaler, w, req, err)
			return
		}
		buf, err := marshaler.Marshal(response)
		if err != nil {
			fmt.Printf("Failed to marshal response message %q: %v", response, err)
			return
		}
		w.WriteHeader(http.StatusOK)
		w.Write(buf)
		f.Flush()
	}).Methods("get")
	router.HandleFunc("/{byteTest}/", func(w http.ResponseWriter, req *http.Request) {
		f, _ := w.(http.Flusher)
		w.Header().Set("Content-Type", marshaler.ContentType())
		var mapping BaseTypeJSONMapping
		decoder := marshaler.NewDecoder(req.Body)
		defer req.Body.Close()
		err := decoder.Decode(&mapping)
		if err != nil && err != io.EOF {
			if e, ok := err.(*json.UnmarshalTypeError); ok {
				w.WriteHeader(http.StatusUnprocessableEntity)
				response := &ErrorResponse{
					Message: "Validation failed",
					Errors: []*Error{
						&Error{
							Resource: "album",
							Field:    e.Field,
							Code:     "invalid",
						},
					},
				}
				buf, err := marshaler.Marshal(response)
				if err != nil {
					buf = []byte("{ \"message\": \"Validation failed\" }")
				}
				w.Write(buf)
				fmt.Println(e)
				return
			}
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Problems parsing JSON\" }")
			w.Write(buf)
			fmt.Println(err)
			return
		}

		payload := &BaseType{}
		s := reflect.ValueOf(&mapping).Elem()
		typeOfMapping := s.Type()
		vars := mux.Vars(req)
		for k, v := range vars {
			varField := strings.ToLower(k)
			for i := 0; i < s.NumField(); i++ {
				structField := strings.ToLower(typeOfMapping.Field(i).Name)
				if varField == structField {
					s.Field(i).Set(reflect.ValueOf(&v))
					continue
				}
			}
		}
		s = reflect.ValueOf(&mapping).Elem()
		typeOfMapping = s.Type()
		queries := req.URL.Query()
		for k, v := range queries {
			varField := strings.ToLower(k)
			for i := 0; i < s.NumField(); i++ {
				structField := strings.ToLower(typeOfMapping.Field(i).Name)
				if varField == structField {
					if len(v) == 1 {
						s.Field(i).Set(reflect.ValueOf(&v[0]))
					} else {
						s.Field(i).Set(reflect.ValueOf(&v[0]))
					}
					continue
				}
			}
		}
		if mapping.BoolTest == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.BoolTest = mapping.BoolTest
		if mapping.ByteTest == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.ByteTest = mapping.ByteTest
		if mapping.I16Test == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.I16Test = mapping.I16Test
		if mapping.I32Test == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.I32Test = mapping.I32Test
		if mapping.I64Test == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.I64Test = mapping.I64Test
		if mapping.DoubleTest == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.DoubleTest = mapping.DoubleTest
		if mapping.BinaryTest == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.BinaryTest = mapping.BinaryTest
		if mapping.StringTest == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.StringTest = mapping.StringTest
		response, err := client.GetByteArgument(frugal.NewFContext(""), payload)
		if err != nil {
			gateway.DefaultFrugalErrorHandler(marshaler, w, req, err)
			return
		}
		buf, err := marshaler.Marshal(response)
		if err != nil {
			fmt.Printf("Failed to marshal response message %q: %v", response, err)
			return
		}
		w.WriteHeader(http.StatusOK)
		w.Write(buf)
		f.Flush()
	}).Methods("get")
	router.HandleFunc("/{i16Test}/", func(w http.ResponseWriter, req *http.Request) {
		f, _ := w.(http.Flusher)
		w.Header().Set("Content-Type", marshaler.ContentType())
		var mapping BaseTypeJSONMapping
		decoder := marshaler.NewDecoder(req.Body)
		defer req.Body.Close()
		err := decoder.Decode(&mapping)
		if err != nil && err != io.EOF {
			if e, ok := err.(*json.UnmarshalTypeError); ok {
				w.WriteHeader(http.StatusUnprocessableEntity)
				response := &ErrorResponse{
					Message: "Validation failed",
					Errors: []*Error{
						&Error{
							Resource: "album",
							Field:    e.Field,
							Code:     "invalid",
						},
					},
				}
				buf, err := marshaler.Marshal(response)
				if err != nil {
					buf = []byte("{ \"message\": \"Validation failed\" }")
				}
				w.Write(buf)
				fmt.Println(e)
				return
			}
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Problems parsing JSON\" }")
			w.Write(buf)
			fmt.Println(err)
			return
		}

		payload := &BaseType{}
		s := reflect.ValueOf(&mapping).Elem()
		typeOfMapping := s.Type()
		vars := mux.Vars(req)
		for k, v := range vars {
			varField := strings.ToLower(k)
			for i := 0; i < s.NumField(); i++ {
				structField := strings.ToLower(typeOfMapping.Field(i).Name)
				if varField == structField {
					s.Field(i).Set(reflect.ValueOf(&v))
					continue
				}
			}
		}
		s = reflect.ValueOf(&mapping).Elem()
		typeOfMapping = s.Type()
		queries := req.URL.Query()
		for k, v := range queries {
			varField := strings.ToLower(k)
			for i := 0; i < s.NumField(); i++ {
				structField := strings.ToLower(typeOfMapping.Field(i).Name)
				if varField == structField {
					if len(v) == 1 {
						s.Field(i).Set(reflect.ValueOf(&v[0]))
					} else {
						s.Field(i).Set(reflect.ValueOf(&v[0]))
					}
					continue
				}
			}
		}
		if mapping.BoolTest == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.BoolTest = mapping.BoolTest
		if mapping.ByteTest == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.ByteTest = mapping.ByteTest
		if mapping.I16Test == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.I16Test = mapping.I16Test
		if mapping.I32Test == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.I32Test = mapping.I32Test
		if mapping.I64Test == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.I64Test = mapping.I64Test
		if mapping.DoubleTest == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.DoubleTest = mapping.DoubleTest
		if mapping.BinaryTest == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.BinaryTest = mapping.BinaryTest
		if mapping.StringTest == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.StringTest = mapping.StringTest
		response, err := client.GetI16Argument(frugal.NewFContext(""), payload)
		if err != nil {
			gateway.DefaultFrugalErrorHandler(marshaler, w, req, err)
			return
		}
		buf, err := marshaler.Marshal(response)
		if err != nil {
			fmt.Printf("Failed to marshal response message %q: %v", response, err)
			return
		}
		w.WriteHeader(http.StatusOK)
		w.Write(buf)
		f.Flush()
	}).Methods("get")
	router.HandleFunc("/{i32Test}/", func(w http.ResponseWriter, req *http.Request) {
		f, _ := w.(http.Flusher)
		w.Header().Set("Content-Type", marshaler.ContentType())
		var mapping BaseTypeJSONMapping
		decoder := marshaler.NewDecoder(req.Body)
		defer req.Body.Close()
		err := decoder.Decode(&mapping)
		if err != nil && err != io.EOF {
			if e, ok := err.(*json.UnmarshalTypeError); ok {
				w.WriteHeader(http.StatusUnprocessableEntity)
				response := &ErrorResponse{
					Message: "Validation failed",
					Errors: []*Error{
						&Error{
							Resource: "album",
							Field:    e.Field,
							Code:     "invalid",
						},
					},
				}
				buf, err := marshaler.Marshal(response)
				if err != nil {
					buf = []byte("{ \"message\": \"Validation failed\" }")
				}
				w.Write(buf)
				fmt.Println(e)
				return
			}
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Problems parsing JSON\" }")
			w.Write(buf)
			fmt.Println(err)
			return
		}

		payload := &BaseType{}
		s := reflect.ValueOf(&mapping).Elem()
		typeOfMapping := s.Type()
		vars := mux.Vars(req)
		for k, v := range vars {
			varField := strings.ToLower(k)
			for i := 0; i < s.NumField(); i++ {
				structField := strings.ToLower(typeOfMapping.Field(i).Name)
				if varField == structField {
					s.Field(i).Set(reflect.ValueOf(&v))
					continue
				}
			}
		}
		s = reflect.ValueOf(&mapping).Elem()
		typeOfMapping = s.Type()
		queries := req.URL.Query()
		for k, v := range queries {
			varField := strings.ToLower(k)
			for i := 0; i < s.NumField(); i++ {
				structField := strings.ToLower(typeOfMapping.Field(i).Name)
				if varField == structField {
					if len(v) == 1 {
						s.Field(i).Set(reflect.ValueOf(&v[0]))
					} else {
						s.Field(i).Set(reflect.ValueOf(&v[0]))
					}
					continue
				}
			}
		}
		if mapping.BoolTest == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.BoolTest = mapping.BoolTest
		if mapping.ByteTest == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.ByteTest = mapping.ByteTest
		if mapping.I16Test == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.I16Test = mapping.I16Test
		if mapping.I32Test == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.I32Test = mapping.I32Test
		if mapping.I64Test == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.I64Test = mapping.I64Test
		if mapping.DoubleTest == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.DoubleTest = mapping.DoubleTest
		if mapping.BinaryTest == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.BinaryTest = mapping.BinaryTest
		if mapping.StringTest == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.StringTest = mapping.StringTest
		response, err := client.GetI32Argument(frugal.NewFContext(""), payload)
		if err != nil {
			gateway.DefaultFrugalErrorHandler(marshaler, w, req, err)
			return
		}
		buf, err := marshaler.Marshal(response)
		if err != nil {
			fmt.Printf("Failed to marshal response message %q: %v", response, err)
			return
		}
		w.WriteHeader(http.StatusOK)
		w.Write(buf)
		f.Flush()
	}).Methods("get")
	router.HandleFunc("/{i64Test}/", func(w http.ResponseWriter, req *http.Request) {
		f, _ := w.(http.Flusher)
		w.Header().Set("Content-Type", marshaler.ContentType())
		var mapping BaseTypeJSONMapping
		decoder := marshaler.NewDecoder(req.Body)
		defer req.Body.Close()
		err := decoder.Decode(&mapping)
		if err != nil && err != io.EOF {
			if e, ok := err.(*json.UnmarshalTypeError); ok {
				w.WriteHeader(http.StatusUnprocessableEntity)
				response := &ErrorResponse{
					Message: "Validation failed",
					Errors: []*Error{
						&Error{
							Resource: "album",
							Field:    e.Field,
							Code:     "invalid",
						},
					},
				}
				buf, err := marshaler.Marshal(response)
				if err != nil {
					buf = []byte("{ \"message\": \"Validation failed\" }")
				}
				w.Write(buf)
				fmt.Println(e)
				return
			}
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Problems parsing JSON\" }")
			w.Write(buf)
			fmt.Println(err)
			return
		}

		payload := &BaseType{}
		s := reflect.ValueOf(&mapping).Elem()
		typeOfMapping := s.Type()
		vars := mux.Vars(req)
		for k, v := range vars {
			varField := strings.ToLower(k)
			for i := 0; i < s.NumField(); i++ {
				structField := strings.ToLower(typeOfMapping.Field(i).Name)
				if varField == structField {
					s.Field(i).Set(reflect.ValueOf(&v))
					continue
				}
			}
		}
		s = reflect.ValueOf(&mapping).Elem()
		typeOfMapping = s.Type()
		queries := req.URL.Query()
		for k, v := range queries {
			varField := strings.ToLower(k)
			for i := 0; i < s.NumField(); i++ {
				structField := strings.ToLower(typeOfMapping.Field(i).Name)
				if varField == structField {
					if len(v) == 1 {
						s.Field(i).Set(reflect.ValueOf(&v[0]))
					} else {
						s.Field(i).Set(reflect.ValueOf(&v[0]))
					}
					continue
				}
			}
		}
		if mapping.BoolTest == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.BoolTest = mapping.BoolTest
		if mapping.ByteTest == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.ByteTest = mapping.ByteTest
		if mapping.I16Test == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.I16Test = mapping.I16Test
		if mapping.I32Test == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.I32Test = mapping.I32Test
		if mapping.I64Test == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.I64Test = mapping.I64Test
		if mapping.DoubleTest == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.DoubleTest = mapping.DoubleTest
		if mapping.BinaryTest == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.BinaryTest = mapping.BinaryTest
		if mapping.StringTest == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.StringTest = mapping.StringTest
		response, err := client.GetI64Argument(frugal.NewFContext(""), payload)
		if err != nil {
			gateway.DefaultFrugalErrorHandler(marshaler, w, req, err)
			return
		}
		buf, err := marshaler.Marshal(response)
		if err != nil {
			fmt.Printf("Failed to marshal response message %q: %v", response, err)
			return
		}
		w.WriteHeader(http.StatusOK)
		w.Write(buf)
		f.Flush()
	}).Methods("get")
	router.HandleFunc("/{doubleTest}/", func(w http.ResponseWriter, req *http.Request) {
		f, _ := w.(http.Flusher)
		w.Header().Set("Content-Type", marshaler.ContentType())
		var mapping BaseTypeJSONMapping
		decoder := marshaler.NewDecoder(req.Body)
		defer req.Body.Close()
		err := decoder.Decode(&mapping)
		if err != nil && err != io.EOF {
			if e, ok := err.(*json.UnmarshalTypeError); ok {
				w.WriteHeader(http.StatusUnprocessableEntity)
				response := &ErrorResponse{
					Message: "Validation failed",
					Errors: []*Error{
						&Error{
							Resource: "album",
							Field:    e.Field,
							Code:     "invalid",
						},
					},
				}
				buf, err := marshaler.Marshal(response)
				if err != nil {
					buf = []byte("{ \"message\": \"Validation failed\" }")
				}
				w.Write(buf)
				fmt.Println(e)
				return
			}
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Problems parsing JSON\" }")
			w.Write(buf)
			fmt.Println(err)
			return
		}

		payload := &BaseType{}
		s := reflect.ValueOf(&mapping).Elem()
		typeOfMapping := s.Type()
		vars := mux.Vars(req)
		for k, v := range vars {
			varField := strings.ToLower(k)
			for i := 0; i < s.NumField(); i++ {
				structField := strings.ToLower(typeOfMapping.Field(i).Name)
				if varField == structField {
					s.Field(i).Set(reflect.ValueOf(&v))
					continue
				}
			}
		}
		s = reflect.ValueOf(&mapping).Elem()
		typeOfMapping = s.Type()
		queries := req.URL.Query()
		for k, v := range queries {
			varField := strings.ToLower(k)
			for i := 0; i < s.NumField(); i++ {
				structField := strings.ToLower(typeOfMapping.Field(i).Name)
				if varField == structField {
					if len(v) == 1 {
						s.Field(i).Set(reflect.ValueOf(&v[0]))
					} else {
						s.Field(i).Set(reflect.ValueOf(&v[0]))
					}
					continue
				}
			}
		}
		if mapping.BoolTest == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.BoolTest = mapping.BoolTest
		if mapping.ByteTest == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.ByteTest = mapping.ByteTest
		if mapping.I16Test == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.I16Test = mapping.I16Test
		if mapping.I32Test == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.I32Test = mapping.I32Test
		if mapping.I64Test == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.I64Test = mapping.I64Test
		if mapping.DoubleTest == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.DoubleTest = mapping.DoubleTest
		if mapping.BinaryTest == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.BinaryTest = mapping.BinaryTest
		if mapping.StringTest == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.StringTest = mapping.StringTest
		response, err := client.GetDoubleArgument(frugal.NewFContext(""), payload)
		if err != nil {
			gateway.DefaultFrugalErrorHandler(marshaler, w, req, err)
			return
		}
		buf, err := marshaler.Marshal(response)
		if err != nil {
			fmt.Printf("Failed to marshal response message %q: %v", response, err)
			return
		}
		w.WriteHeader(http.StatusOK)
		w.Write(buf)
		f.Flush()
	}).Methods("get")
	router.HandleFunc("/{binaryTest}/", func(w http.ResponseWriter, req *http.Request) {
		f, _ := w.(http.Flusher)
		w.Header().Set("Content-Type", marshaler.ContentType())
		var mapping BaseTypeJSONMapping
		decoder := marshaler.NewDecoder(req.Body)
		defer req.Body.Close()
		err := decoder.Decode(&mapping)
		if err != nil && err != io.EOF {
			if e, ok := err.(*json.UnmarshalTypeError); ok {
				w.WriteHeader(http.StatusUnprocessableEntity)
				response := &ErrorResponse{
					Message: "Validation failed",
					Errors: []*Error{
						&Error{
							Resource: "album",
							Field:    e.Field,
							Code:     "invalid",
						},
					},
				}
				buf, err := marshaler.Marshal(response)
				if err != nil {
					buf = []byte("{ \"message\": \"Validation failed\" }")
				}
				w.Write(buf)
				fmt.Println(e)
				return
			}
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Problems parsing JSON\" }")
			w.Write(buf)
			fmt.Println(err)
			return
		}

		payload := &BaseType{}
		s := reflect.ValueOf(&mapping).Elem()
		typeOfMapping := s.Type()
		vars := mux.Vars(req)
		for k, v := range vars {
			varField := strings.ToLower(k)
			for i := 0; i < s.NumField(); i++ {
				structField := strings.ToLower(typeOfMapping.Field(i).Name)
				if varField == structField {
					s.Field(i).Set(reflect.ValueOf(&v))
					continue
				}
			}
		}
		s = reflect.ValueOf(&mapping).Elem()
		typeOfMapping = s.Type()
		queries := req.URL.Query()
		for k, v := range queries {
			varField := strings.ToLower(k)
			for i := 0; i < s.NumField(); i++ {
				structField := strings.ToLower(typeOfMapping.Field(i).Name)
				if varField == structField {
					if len(v) == 1 {
						s.Field(i).Set(reflect.ValueOf(&v[0]))
					} else {
						s.Field(i).Set(reflect.ValueOf(&v[0]))
					}
					continue
				}
			}
		}
		if mapping.BoolTest == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.BoolTest = mapping.BoolTest
		if mapping.ByteTest == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.ByteTest = mapping.ByteTest
		if mapping.I16Test == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.I16Test = mapping.I16Test
		if mapping.I32Test == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.I32Test = mapping.I32Test
		if mapping.I64Test == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.I64Test = mapping.I64Test
		if mapping.DoubleTest == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.DoubleTest = mapping.DoubleTest
		if mapping.BinaryTest == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.BinaryTest = mapping.BinaryTest
		if mapping.StringTest == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.StringTest = mapping.StringTest
		response, err := client.GetBinaryArgument(frugal.NewFContext(""), payload)
		if err != nil {
			gateway.DefaultFrugalErrorHandler(marshaler, w, req, err)
			return
		}
		buf, err := marshaler.Marshal(response)
		if err != nil {
			fmt.Printf("Failed to marshal response message %q: %v", response, err)
			return
		}
		w.WriteHeader(http.StatusOK)
		w.Write(buf)
		f.Flush()
	}).Methods("get")
	router.HandleFunc("/{stringTest}/", func(w http.ResponseWriter, req *http.Request) {
		f, _ := w.(http.Flusher)
		w.Header().Set("Content-Type", marshaler.ContentType())
		var mapping BaseTypeJSONMapping
		decoder := marshaler.NewDecoder(req.Body)
		defer req.Body.Close()
		err := decoder.Decode(&mapping)
		if err != nil && err != io.EOF {
			if e, ok := err.(*json.UnmarshalTypeError); ok {
				w.WriteHeader(http.StatusUnprocessableEntity)
				response := &ErrorResponse{
					Message: "Validation failed",
					Errors: []*Error{
						&Error{
							Resource: "album",
							Field:    e.Field,
							Code:     "invalid",
						},
					},
				}
				buf, err := marshaler.Marshal(response)
				if err != nil {
					buf = []byte("{ \"message\": \"Validation failed\" }")
				}
				w.Write(buf)
				fmt.Println(e)
				return
			}
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Problems parsing JSON\" }")
			w.Write(buf)
			fmt.Println(err)
			return
		}

		payload := &BaseType{}
		s := reflect.ValueOf(&mapping).Elem()
		typeOfMapping := s.Type()
		vars := mux.Vars(req)
		for k, v := range vars {
			varField := strings.ToLower(k)
			for i := 0; i < s.NumField(); i++ {
				structField := strings.ToLower(typeOfMapping.Field(i).Name)
				if varField == structField {
					s.Field(i).Set(reflect.ValueOf(&v))
					continue
				}
			}
		}
		s = reflect.ValueOf(&mapping).Elem()
		typeOfMapping = s.Type()
		queries := req.URL.Query()
		for k, v := range queries {
			varField := strings.ToLower(k)
			for i := 0; i < s.NumField(); i++ {
				structField := strings.ToLower(typeOfMapping.Field(i).Name)
				if varField == structField {
					if len(v) == 1 {
						s.Field(i).Set(reflect.ValueOf(&v[0]))
					} else {
						s.Field(i).Set(reflect.ValueOf(&v[0]))
					}
					continue
				}
			}
		}
		if mapping.BoolTest == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.BoolTest = mapping.BoolTest
		if mapping.ByteTest == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.ByteTest = mapping.ByteTest
		if mapping.I16Test == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.I16Test = mapping.I16Test
		if mapping.I32Test == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.I32Test = mapping.I32Test
		if mapping.I64Test == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.I64Test = mapping.I64Test
		if mapping.DoubleTest == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.DoubleTest = mapping.DoubleTest
		if mapping.BinaryTest == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.BinaryTest = mapping.BinaryTest
		if mapping.StringTest == nil {
			w.WriteHeader(http.StatusBadRequest)
			buf := []byte("{ \"message\": \"Invalid JSON data\" }")
			w.Write(buf)
			return
		}
		payload.StringTest = mapping.StringTest
		response, err := client.GetStringArgument(frugal.NewFContext(""), payload)
		if err != nil {
			gateway.DefaultFrugalErrorHandler(marshaler, w, req, err)
			return
		}
		buf, err := marshaler.Marshal(response)
		if err != nil {
			fmt.Printf("Failed to marshal response message %q: %v", response, err)
			return
		}
		w.WriteHeader(http.StatusOK)
		w.Write(buf)
		f.Flush()
	}).Methods("get")
	return nil
}
