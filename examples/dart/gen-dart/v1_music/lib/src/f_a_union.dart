// Autogenerated by Frugal Compiler (2.0.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart' as thrift;
import 'package:v1_music/v1_music.dart' as t_v1_music;

class AUnion implements thrift.TBase {
  static final thrift.TStruct _STRUCT_DESC = new thrift.TStruct("AUnion");
  static final thrift.TField _STR_FIELD_DESC = new thrift.TField("str", thrift.TType.STRING, 1);
  static final thrift.TField _NUM_FIELD_DESC = new thrift.TField("num", thrift.TType.I64, 2);
  static final thrift.TField _AN_ENUM_FIELD_DESC = new thrift.TField("an_enum", thrift.TType.I32, 3);

  String _str;
  static const int STR = 1;
  int _num;
  static const int NUM = 2;
  int _an_enum;
  static const int AN_ENUM = 3;

  bool __isset_num = false;
  bool __isset_an_enum = false;

  AUnion() {
  }

  String get str => this._str;

  set str(String str) {
    this._str = str;
  }

  bool isSetStr() => this.str != null;

  unsetStr() {
    this.str = null;
  }

  int get num => this._num;

  set num(int num) {
    this._num = num;
    this.__isset_num = true;
  }

  bool isSetNum() => this.__isset_num;

  unsetNum() {
    this.__isset_num = false;
  }

  int get an_enum => this._an_enum;

  set an_enum(int an_enum) {
    this._an_enum = an_enum;
    this.__isset_an_enum = true;
  }

  bool isSetAn_enum() => this.__isset_an_enum;

  unsetAn_enum() {
    this.__isset_an_enum = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case STR:
        return this.str;
      case NUM:
        return this.num;
      case AN_ENUM:
        return this.an_enum;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch(fieldID) {
      case STR:
        if(value == null) {
          unsetStr();
        } else {
          this.str = value as String;
        }
        break;

      case NUM:
        if(value == null) {
          unsetNum();
        } else {
          this.num = value as int;
        }
        break;

      case AN_ENUM:
        if(value == null) {
          unsetAn_enum();
        } else {
          this.an_enum = value as int;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if the field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch(fieldID) {
      case STR:
        return isSetStr();
      case NUM:
        return isSetNum();
      case AN_ENUM:
        return isSetAn_enum();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(thrift.TProtocol iprot) {
    thrift.TField field;
    iprot.readStructBegin();
    while(true) {
      field = iprot.readFieldBegin();
      if(field.type == thrift.TType.STOP) {
        break;
      }
      switch(field.id) {
        case STR:
          if(field.type == thrift.TType.STRING) {
            str = iprot.readString();
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NUM:
          if(field.type == thrift.TType.I64) {
            num = iprot.readI64();
            this.__isset_num = true;
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case AN_ENUM:
          if(field.type == thrift.TType.I32) {
            an_enum = iprot.readI32();
            this.__isset_an_enum = true;
          } else {
            thrift.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          thrift.TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(thrift.TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if(isSetStr() && this.str != null) {
      oprot.writeFieldBegin(_STR_FIELD_DESC);
      oprot.writeString(str);
      oprot.writeFieldEnd();
    }
    if(isSetNum()) {
      oprot.writeFieldBegin(_NUM_FIELD_DESC);
      oprot.writeI64(num);
      oprot.writeFieldEnd();
    }
    if(isSetAn_enum()) {
      oprot.writeFieldBegin(_AN_ENUM_FIELD_DESC);
      oprot.writeI32(an_enum);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("AUnion(");

    if(isSetStr()) {
      ret.write("str:");
      if(this.str == null) {
        ret.write("null");
      } else {
        ret.write(this.str);
      }
    }

    if(isSetNum()) {
      ret.write(", ");
      ret.write("num:");
      ret.write(this.num);
    }

    if(isSetAn_enum()) {
      ret.write(", ");
      ret.write("an_enum:");
      String an_enum_name = t_v1_music.PerfRightsOrg.VALUES_TO_NAMES[this.an_enum];
      if(an_enum_name != null) {
        ret.write(an_enum_name);
        ret.write(" (");
      }
      ret.write(this.an_enum);
      if(an_enum_name != null) {
        ret.write(")");
      }
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check exactly one field is set
    int setFields = 0;
    if(isSetStr()) {
      setFields++;
    }
    if(isSetNum()) {
      setFields++;
    }
    if(isSetAn_enum()) {
      setFields++;
    }
    if(setFields != 1) {
      throw new thrift.TProtocolError(thrift.TProtocolErrorType.UNKNOWN, "The union did not have exactly one field set, $setFields were set");
    }
    // check that fields of type enum have valid values
    if(isSetAn_enum() && !t_v1_music.PerfRightsOrg.VALID_VALUES.contains(an_enum)) {
      throw new thrift.TProtocolError(thrift.TProtocolErrorType.UNKNOWN, "The field 'an_enum' has been assigned the invalid value $an_enum");
    }
  }
}
