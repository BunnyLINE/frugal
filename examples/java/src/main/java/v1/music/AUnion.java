/**
 * Autogenerated by Frugal Compiler (2.0.1)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package v1.music;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Generated(value = "Autogenerated by Frugal Compiler (2.0.1)")
public class AUnion extends org.apache.thrift.TUnion<AUnion, AUnion._Fields> {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AUnion");

	private static final org.apache.thrift.protocol.TField STR_FIELD_DESC = new org.apache.thrift.protocol.TField("str", org.apache.thrift.protocol.TType.STRING, (short)1);
	private static final org.apache.thrift.protocol.TField NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("num", org.apache.thrift.protocol.TType.I64, (short)2);
	private static final org.apache.thrift.protocol.TField AN_ENUM_FIELD_DESC = new org.apache.thrift.protocol.TField("an_enum", org.apache.thrift.protocol.TType.I32, (short)3);

	/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		STR((short)1, "str"),
		NUM((short)2, "num"),
		AN_ENUM((short)3, "an_enum")
;

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch(fieldId) {
				case 1: // STR
					return STR;
				case 2: // NUM
					return NUM;
				case 3: // AN_ENUM
					return AN_ENUM;
				default:
					return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	public AUnion() {
		super();
	}

	public AUnion(_Fields setField, Object value) {
		super(setField, value);
	}

	public AUnion(AUnion other) {
		super(other);
	}
	public AUnion deepCopy() {
		return new AUnion(this);
	}

	public static AUnion str(String value) {
		AUnion x = new AUnion();
		x.setStr(value);
		return x;
	}

	public static AUnion num(long value) {
		AUnion x = new AUnion();
		x.setNum(value);
		return x;
	}

	public static AUnion an_enum(PerfRightsOrg value) {
		AUnion x = new AUnion();
		x.setAn_enum(value);
		return x;
	}

	@Override
	protected void checkType(_Fields setField, Object value) throws ClassCastException {
		switch (setField) {
			case STR:
				if (value instanceof String) {
					break;
				}
				throw new ClassCastException("Was expecting value of type String for field 'str', but got " + value.getClass().getSimpleName());
			case NUM:
				if (value instanceof Long) {
					break;
				}
				throw new ClassCastException("Was expecting value of type Long for field 'num', but got " + value.getClass().getSimpleName());
			case AN_ENUM:
				if (value instanceof PerfRightsOrg) {
					break;
				}
				throw new ClassCastException("Was expecting value of type PerfRightsOrg for field 'an_enum', but got " + value.getClass().getSimpleName());
			default:
				throw new IllegalArgumentException("Unknown field id " + setField);
		}
	}

	@Override
	protected Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
		_Fields setField = _Fields.findByThriftId(field.id);
		if (setField != null) {
			switch (setField) {
				case STR:
					if (field.type == STR_FIELD_DESC.type) {
						String str = iprot.readString();
						return str;
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
						return null;
					}
				case NUM:
					if (field.type == NUM_FIELD_DESC.type) {
						Long num = iprot.readI64();
						return num;
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
						return null;
					}
				case AN_ENUM:
					if (field.type == AN_ENUM_FIELD_DESC.type) {
						PerfRightsOrg an_enum = PerfRightsOrg.findByValue(iprot.readI32());
						return an_enum;
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
						return null;
					}
				default:
					throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
			}
		} else {
			org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
			return null;
		}
	}

	@Override
	protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		switch (setField_) {
			case STR:
				String str = (String)value_;
				String elem26 = str;
				oprot.writeString(elem26);
				return;
			case NUM:
				Long num = (Long)value_;
				long elem27 = num;
				oprot.writeI64(elem27);
				return;
			case AN_ENUM:
				PerfRightsOrg an_enum = (PerfRightsOrg)value_;
				PerfRightsOrg elem28 = an_enum;
				oprot.writeI32(elem28.getValue());
				return;
			default:
				throw new IllegalStateException("Cannot write union with unknown field " + setField_);
		}
	}

	@Override
	protected Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
		_Fields setField = _Fields.findByThriftId(fieldID);
		if (setField != null) {
			switch (setField) {
				case STR:
					String str = iprot.readString();
					return str;
				case NUM:
					Long num = iprot.readI64();
					return num;
				case AN_ENUM:
					PerfRightsOrg an_enum = PerfRightsOrg.findByValue(iprot.readI32());
					return an_enum;
				default:
					throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
			}
		} else {
			throw new TProtocolException("Couldn't find a field with field id " + fieldID);
		}
	}

	@Override
	protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		switch (setField_) {
			case STR:
				String str = (String)value_;
				String elem29 = str;
				oprot.writeString(elem29);
				return;
			case NUM:
				Long num = (Long)value_;
				long elem30 = num;
				oprot.writeI64(elem30);
				return;
			case AN_ENUM:
				PerfRightsOrg an_enum = (PerfRightsOrg)value_;
				PerfRightsOrg elem31 = an_enum;
				oprot.writeI32(elem31.getValue());
				return;
			default:
				throw new IllegalStateException("Cannot write union with unknown field " + setField_);
		}
	}

	@Override
	protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
		switch (setField) {
			case STR:
				return STR_FIELD_DESC;
			case NUM:
				return NUM_FIELD_DESC;
			case AN_ENUM:
				return AN_ENUM_FIELD_DESC;
			default:
				throw new IllegalArgumentException("Unknown field id " + setField);
		}
	}

	@Override
	protected org.apache.thrift.protocol.TStruct getStructDesc() {
		return STRUCT_DESC;
	}

	@Override
	protected _Fields enumForId(short id) {
		return _Fields.findByThriftIdOrThrow(id);
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}


	public String getStr() {
		if (getSetField() == _Fields.STR) {
			return (String)getFieldValue();
		} else {
			throw new RuntimeException("Cannot get field 'str' because union is currently set to " + getFieldDesc(getSetField()).name);
		}
	}

	public void setStr(String value) {
		if (value == null) throw new NullPointerException();
		setField_ = _Fields.STR;
		value_ = value;
	}

	public long getNum() {
		if (getSetField() == _Fields.NUM) {
			return (Long)getFieldValue();
		} else {
			throw new RuntimeException("Cannot get field 'num' because union is currently set to " + getFieldDesc(getSetField()).name);
		}
	}

	public void setNum(long value) {
		setField_ = _Fields.NUM;
		value_ = value;
	}

	public PerfRightsOrg getAn_enum() {
		if (getSetField() == _Fields.AN_ENUM) {
			return (PerfRightsOrg)getFieldValue();
		} else {
			throw new RuntimeException("Cannot get field 'an_enum' because union is currently set to " + getFieldDesc(getSetField()).name);
		}
	}

	public void setAn_enum(PerfRightsOrg value) {
		if (value == null) throw new NullPointerException();
		setField_ = _Fields.AN_ENUM;
		value_ = value;
	}

	public boolean isSetStr() {
		return setField_ == _Fields.STR;
	}

	public boolean isSetNum() {
		return setField_ == _Fields.NUM;
	}

	public boolean isSetAn_enum() {
		return setField_ == _Fields.AN_ENUM;
	}


	public boolean equals(Object other) {
		if (other instanceof AUnion) {
			return equals((AUnion)other);
		} else {
			return false;
		}
	}

	public boolean equals(AUnion other) {
		return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
	}

	@Override
	public int compareTo(AUnion other) {
		int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
		if (lastComparison == 0) {
			return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
		}
		return lastComparison;
	}


	@Override
	public int hashCode() {
		List<Object> list = new ArrayList<Object>();
		list.add(this.getClass().getName());
		org.apache.thrift.TFieldIdEnum setField = getSetField();
		if (setField != null) {
			list.add(setField.getThriftFieldId());
			Object value = getFieldValue();
			if (value instanceof org.apache.thrift.TEnum) {
				list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
			} else {
				list.add(value);
			}
		}
		return list.hashCode();
	}
	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
		try {
			read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

}
