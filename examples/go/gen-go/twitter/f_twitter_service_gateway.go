// Currently written by hand.
// WILL be autogenerated by Frugal Compiler

package twitter

import (
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/Workiva/frugal/lib/gateway"
	"github.com/Workiva/frugal/lib/go"
	"github.com/gorilla/mux"
)

// SuccessBody is a template for HTTP responses
// TODO: Make templatable and configurable?
type SuccessBody struct {
	RequestID string      `json:"request_id"`
	Message   string      `json:"message"`
	Data      interface{} `json:"data"`
}

func createTweetRequest(marshaler gateway.Marshaler, w http.ResponseWriter, req *http.Request) (*Tweet, error) {

	// Created from IDL based on json annotations
	// TODO: investigate using TProtocol to do this without a mapping struct? Would potentially handle nulls better.
	type PayloadMapping struct {
		UserID    *int32     `json:"user_id"`
		UserName  *string    `json:"user_name"`
		Text      *string    `json:"text"`
		Location  *Location  `json:"location"`
		TweetType *TweetType `json:"tweet_type"`
		Language  *string    `json:"language"`
	}

	var mapping PayloadMapping

	// Decode request body into payload mapping
	decoder := marshaler.NewDecoder(req.Body)
	defer req.Body.Close()
	err := decoder.Decode(&mapping)
	if err != nil {
		if e, ok := err.(*json.UnmarshalTypeError); ok {
			return nil, gateway.NewValidationError("tweet", e.Field, "invalid")
		}
		return nil, err
	}

	// Thrift struct for calling Frugal client
	payload := &Tweet{}

	// Extract URL variables
	vars := mux.Vars(req)
	userID, err := gateway.Int32(vars["user_id"])
	if userID == 0 || err != nil {
		// TODO: Should return 404 Not Found
		return nil, gateway.NewValidationError("tweet", "user_id", "missing")
	}
	payload.UserId = userID

	// TODO: Extract query variables

	// Map incoming payload to Thrift struct for calling Frugal client
	if mapping.UserName != nil {
		payload.UserName = *mapping.UserName
	} else {
		return nil, gateway.NewValidationError("tweet", "user_name", "missing")
	}
	if mapping.Text != nil {
		payload.Text = *mapping.Text
	} else {
		return nil, gateway.NewValidationError("tweet", "text", "missing")
	}
	if mapping.Location != nil {
		// TODO: do we have to handle structs specially?
		payload.Loc = mapping.Location
	}
	if mapping.TweetType != nil {
		// TODO: do we have to enums specially?
		payload.TweetType = *mapping.TweetType
	}
	if mapping.Language != nil {
		payload.Language = *mapping.Language
	}

	// return buf, err
	return payload, nil
}

func createTweetResponse(marshaler gateway.Marshaler, w http.ResponseWriter, req *http.Request) error {
	f, _ := w.(http.Flusher)
	body := SuccessBody{"<request-id>", "", nil}

	buf, merr := marshaler.Marshal(body)
	if merr != nil {
		fmt.Printf("Failed to marshal error message %q: %v", body, merr)
		return merr
	}

	// Write the response
	w.Header().Set("Content-Type", marshaler.ContentType())
	w.WriteHeader(http.StatusOK)
	w.Write(buf)
	f.Flush()
	return nil
}

// RegisterTwitterServiceHandler registers the HTTP handlers for service
// FStore.  The handlers forward requests to the Frugal endpoint over the
// given FClient.
func RegisterTwitterServiceHandler(router *gateway.Router, client *FTwitterClient) error {

	// TODO: Make marshaler configurable for custom request and response transformations
	marshaler := &gateway.JSON{}

	router.HandleFunc(
		"/v1/twitter/tweets/{user_id}", func(w http.ResponseWriter, req *http.Request) {
			// Generate payload for Frugal client
			body, err := createTweetRequest(marshaler, w, req)

			if err != nil {
				// TODO: Make error handlers configurable
				gateway.DefaultRequestErrorHandler(marshaler, w, req, err)
				return
			}

			// Forward request to Frugal client
			err = client.CreateTweet(frugal.NewFContext(""), body)
			if err != nil {
				gateway.DefaultFrugalErrorHandler(marshaler, w, req, err)
				return
			}

			// Generate response payload for HTTP client
			err = createTweetResponse(marshaler, w, req)
			if err != nil {
				gateway.DefaultResponseErrorHandler(marshaler, w, req, err)
			}
		}).Methods("PUT")
	//.Queries TODO: add query parameter matching here?

	return nil
}
