// Currently written by hand.
// WILL be autogenerated by Frugal Compiler

package twitter

import (
	"fmt"
	"net/http"

	"github.com/Workiva/frugal/lib/gateway"
	"github.com/Workiva/frugal/lib/go"
)

// SuccessBody is a template for HTTP responses
// TODO: Make templatable and configurable
type SuccessBody struct {
	RequestID string      `json:"request_id"`
	Message   string      `json:"message"`
	Data      interface{} `json:"data"`
}

func createTweetRequest(marshaler gateway.Marshaler, w http.ResponseWriter, req *http.Request) (*Tweet, error) {
	var payload Tweet

	// vars := mux.Vars(req)
	// queries := req.URL.Query().Get("")
	// TODO: Generate URL var and query var extraction from IDL file ^

	// Decode request body into expected struct
	decoder := marshaler.NewDecoder(req.Body)
	defer req.Body.Close()

	err := decoder.Decode(&payload)
	if err != nil {
		return nil, err
	}

	// Check that body matches expected types correctly
	// TODO: ^

	// return buf, err
	return &payload, nil
}

func createTweetResponse(marshaler gateway.Marshaler, w http.ResponseWriter, req *http.Request) error {
	f, _ := w.(http.Flusher)
	body := SuccessBody{"<request-id>", "", nil}

	buf, merr := marshaler.Marshal(body)
	if merr != nil {
		fmt.Printf("Failed to marshal error message %q: %v", body, merr)
		return merr
	}

	// Write the response
	w.Header().Set("Content-Type", marshaler.ContentType())
	w.WriteHeader(http.StatusOK)
	w.Write(buf)
	f.Flush()
	return nil
}

// RegisterTwitterServiceHandler registers the HTTP handlers for service
// FStore.  The handlers forward requests to the Frugal endpoint over the
// given FClient.
func RegisterTwitterServiceHandler(router *gateway.Router, client *FTwitterClient) error {

	// TODO: Make marshaler configurable for custom request and response transformations
	marshaler := &gateway.JSON{}

	router.HandleFunc(
		"/v1/twitter/tweets", func(w http.ResponseWriter, req *http.Request) {
			// Generate payload for Frugal client
			body, err := createTweetRequest(marshaler, w, req)

			if err != nil {
				// TODO: Make error handlers configurable
				gateway.DefaultRequestErrorHandler(marshaler, w, req, err)
				return
			}

			// Forward request to Frugal client
			err = client.CreateTweet(frugal.NewFContext(""), body)
			if err != nil {
				gateway.DefaultFrugalErrorHandler(marshaler, w, req, err)
				return
			}

			// Generate response payload for HTTP client
			err = createTweetResponse(marshaler, w, req)
			if err != nil {
				gateway.DefaultResponseErrorHandler(marshaler, w, req, err)
			}
		}).Methods("PUT")
	//.Queries TODO: add query parameter matching here?

	return nil
}
