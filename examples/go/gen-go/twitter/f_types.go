// Autogenerated by Frugal Compiler (2.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package twitter

import (
	"bytes"
	"database/sql/driver"
	"errors"
	"fmt"

	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

const MAX_RESULTS = 100

func init() {
}

type TweetList []*Tweet
type TweetType int64

const (
	TweetType_TWEET   TweetType = 0
	TweetType_RETWEET TweetType = 1
	TweetType_DM      TweetType = 2
	TweetType_REPLY   TweetType = 3
)

func (p TweetType) String() string {
	switch p {
	case TweetType_TWEET:
		return "TWEET"
	case TweetType_RETWEET:
		return "RETWEET"
	case TweetType_DM:
		return "DM"
	case TweetType_REPLY:
		return "REPLY"
	}
	return "<UNSET>"
}

func TweetTypeFromString(s string) (TweetType, error) {
	switch s {
	case "TWEET":
		return TweetType_TWEET, nil
	case "RETWEET":
		return TweetType_RETWEET, nil
	case "DM":
		return TweetType_DM, nil
	case "REPLY":
		return TweetType_REPLY, nil
	}
	return TweetType(0), fmt.Errorf("not a valid TweetType string")
}

func (p TweetType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TweetType) UnmarshalText(text []byte) error {
	q, err := TweetTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *TweetType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = TweetType(v)
	return nil
}

func (p *TweetType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type Location struct {
	Latitude  float64 `thrift:"latitude,1,required" db:"latitude" json:"latitude"`
	Longitude float64 `thrift:"longitude,2,required" db:"longitude" json:"longitude"`
}

func NewLocation() *Location {
	return &Location{}
}

func (p *Location) GetLatitude() float64 {
	return p.Latitude
}

func (p *Location) GetLongitude() float64 {
	return p.Longitude
}

func (p *Location) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	issetLatitude := false
	issetLongitude := false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetLatitude = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetLongitude = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetLatitude {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Latitude is not set"))
	}
	if !issetLongitude {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Longitude is not set"))
	}
	return nil
}

func (p *Location) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Latitude = v
	}
	return nil
}

func (p *Location) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Longitude = v
	}
	return nil
}

func (p *Location) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Location"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Location) writeField1(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("latitude", thrift.DOUBLE, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:latitude: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Latitude)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.latitude (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:latitude: ", p), err)
	}
	return nil
}

func (p *Location) writeField2(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("longitude", thrift.DOUBLE, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:longitude: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Longitude)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.longitude (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:longitude: ", p), err)
	}
	return nil
}

func (p *Location) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Location(%+v)", *p)
}

type Tweet struct {
	UserId    int32     `thrift:"userId,1,required" db:"userId" json:"userId"`
	UserName  string    `thrift:"userName,2,required" db:"userName" json:"userName"`
	Text      string    `thrift:"text,3,required" db:"text" json:"text"`
	Loc       *Location `thrift:"loc,4" db:"loc" json:"loc,omitempty"`
	TweetType TweetType `thrift:"tweetType,5" db:"tweetType" json:"tweetType,omitempty"`
	Language  string    `thrift:"language,16" db:"language" json:"language,omitempty"`
}

func NewTweet() *Tweet {
	return &Tweet{
		TweetType: TweetType_TWEET,
		Language:  "english",
	}
}

func (p *Tweet) GetUserId() int32 {
	return p.UserId
}

func (p *Tweet) GetUserName() string {
	return p.UserName
}

func (p *Tweet) GetText() string {
	return p.Text
}

var Tweet_Loc_DEFAULT *Location

func (p *Tweet) IsSetLoc() bool {
	return p.Loc != nil
}

func (p *Tweet) GetLoc() *Location {
	if !p.IsSetLoc() {
		return Tweet_Loc_DEFAULT
	}
	return p.Loc
}

var Tweet_TweetType_DEFAULT TweetType = TweetType_TWEET

func (p *Tweet) IsSetTweetType() bool {
	return p.TweetType != Tweet_TweetType_DEFAULT
}

func (p *Tweet) GetTweetType() TweetType {
	return p.TweetType
}

var Tweet_Language_DEFAULT string = "english"

func (p *Tweet) IsSetLanguage() bool {
	return p.Language != Tweet_Language_DEFAULT
}

func (p *Tweet) GetLanguage() string {
	return p.Language
}

func (p *Tweet) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	issetUserId := false
	issetUserName := false
	issetText := false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetUserId = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetUserName = true
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
			issetText = true
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.ReadField16(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetUserId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserId is not set"))
	}
	if !issetUserName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserName is not set"))
	}
	if !issetText {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Text is not set"))
	}
	return nil
}

func (p *Tweet) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *Tweet) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UserName = v
	}
	return nil
}

func (p *Tweet) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Text = v
	}
	return nil
}

func (p *Tweet) ReadField4(iprot thrift.TProtocol) error {
	p.Loc = NewLocation()
	if err := p.Loc.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Loc), err)
	}
	return nil
}

func (p *Tweet) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := TweetType(v)
		p.TweetType = temp
	}
	return nil
}

func (p *Tweet) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.Language = v
	}
	return nil
}

func (p *Tweet) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Tweet"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Tweet) writeField1(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("userId", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.UserId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err)
	}
	return nil
}

func (p *Tweet) writeField2(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("userName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userName: ", p), err)
	}
	if err := oprot.WriteString(string(p.UserName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userName: ", p), err)
	}
	return nil
}

func (p *Tweet) writeField3(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("text", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:text: ", p), err)
	}
	if err := oprot.WriteString(string(p.Text)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.text (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:text: ", p), err)
	}
	return nil
}

func (p *Tweet) writeField4(oprot thrift.TProtocol) error {
	if p.IsSetLoc() {
		if err := oprot.WriteFieldBegin("loc", thrift.STRUCT, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:loc: ", p), err)
		}
		if err := p.Loc.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Loc), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:loc: ", p), err)
		}
	}
	return nil
}

func (p *Tweet) writeField5(oprot thrift.TProtocol) error {
	if p.IsSetTweetType() {
		if err := oprot.WriteFieldBegin("tweetType", thrift.I32, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:tweetType: ", p), err)
		}
		if err := oprot.WriteI32(int32(p.TweetType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.tweetType (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:tweetType: ", p), err)
		}
	}
	return nil
}

func (p *Tweet) writeField16(oprot thrift.TProtocol) error {
	if p.IsSetLanguage() {
		if err := oprot.WriteFieldBegin("language", thrift.STRING, 16); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:language: ", p), err)
		}
		if err := oprot.WriteString(string(p.Language)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.language (16) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 16:language: ", p), err)
		}
	}
	return nil
}

func (p *Tweet) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Tweet(%+v)", *p)
}

type TweetSearchResult_ struct {
	Tweets TweetList `thrift:"tweets,1" db:"tweets" json:"tweets"`
}

func NewTweetSearchResult_() *TweetSearchResult_ {
	return &TweetSearchResult_{}
}

func (p *TweetSearchResult_) GetTweets() TweetList {
	return p.Tweets
}

func (p *TweetSearchResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TweetSearchResult_) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	p.Tweets = make(TweetList, 0, size)
	for i := 0; i < size; i++ {
		elem0 := NewTweet()
		if err := elem0.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", elem0), err)
		}
		p.Tweets = append(p.Tweets, elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TweetSearchResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TweetSearchResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TweetSearchResult_) writeField1(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("tweets", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tweets: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Tweets)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Tweets {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tweets: ", p), err)
	}
	return nil
}

func (p *TweetSearchResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TweetSearchResult_(%+v)", *p)
}

type TwitterUnavailable struct {
	Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewTwitterUnavailable() *TwitterUnavailable {
	return &TwitterUnavailable{}
}

func (p *TwitterUnavailable) GetMessage() string {
	return p.Message
}

func (p *TwitterUnavailable) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TwitterUnavailable) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *TwitterUnavailable) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TwitterUnavailable"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TwitterUnavailable) writeField1(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err)
	}
	return nil
}

func (p *TwitterUnavailable) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TwitterUnavailable(%+v)", *p)
}

func (p *TwitterUnavailable) Error() string {
	return p.String()
}
