{
        package parser

        import (
                "fmt"
                "regexp"
                "strconv"
                "strings"
        )

        var (
                identifier     = regexp.MustCompile("^[A-Za-z]+[A-Za-z0-9]")
                prefixVariable = regexp.MustCompile("{\\w*}")
                defaultPrefix  = &ScopePrefix{String: "", Variables: make([]string, 0)}
        )

        type statementWrapper struct {
                comment   []string
                statement interface{}
        }

        type namespace struct {
                scope     string
                namespace string
        }

        
        type exception *Struct

        type union *Struct

        type include string

        func newScopePrefix(prefix string) (*ScopePrefix, error) {
                variables := []string{}
                for _, variable := range prefixVariable.FindAllString(prefix, -1) {
                        variable = variable[1 : len(variable)-1]
                        if len(variable) == 0 || !identifier.MatchString(variable) {
                                return nil, fmt.Errorf("parser: invalid prefix variable '%s'", variable)
                        }
                        variables = append(variables, variable)
                }
                return &ScopePrefix{String: prefix, Variables: variables}, nil
        }

        func toIfaceSlice(v interface{}) []interface{} {
                if v == nil {
                        return nil
                }
                return v.([]interface{})
        }

        func ifaceSliceToString(v interface{}) string {
                ifs := toIfaceSlice(v)
                b := make([]byte, len(ifs))
                for i, v := range ifs {
                        b[i] = v.([]uint8)[0]
                }
                return string(b)
        }

        func rawCommentToDocStr(raw string) []string {
                rawLines := strings.Split(raw, "\n")
                comment := make([]string, len(rawLines))
                for i, line := range rawLines {
                        comment[i] = strings.TrimLeft(line, "* ")
                }
                return comment
        }

        // toStruct converts a union to a struct with all fields optional.
        func unionToStruct(u union) *Struct {
                st := (*Struct)(u)
                for _, f := range st.Fields {
                        f.Optional = true
                }
                return st
        }
}

///////////////////////////////////////////////////////////////////////////////
//                                   TOP-LEVEL                               //
///////////////////////////////////////////////////////////////////////////////

Grammar ← __ statements:( Statement __ )* (EOF / SyntaxError) {
        thrift := &Thrift{
                Includes:   make(map[string]string),
                Namespaces: make(map[string]string),
                Typedefs:   make(map[string]*TypeDef),
                Constants:  make(map[string]*Constant),
                Enums:      make(map[string]*Enum),
                Structs:    make(map[string]*Struct),
                Exceptions: make(map[string]*Struct),
                Unions:     make(map[string]*Struct),
                Services:   make(map[string]*Service),
        }
        frugal := &Frugal{
                Thrift: thrift,
                Scopes: []*Scope{},
        }

        stmts := toIfaceSlice(statements)
        for _, st := range stmts {
                wrapper := st.([]interface{})[0].(*statementWrapper)
                switch v := wrapper.statement.(type) {
                case *namespace:
                        thrift.Namespaces[v.scope] = v.namespace
                case *Constant:
                        v.Comment = wrapper.comment
                        thrift.Constants[v.Name] = v
                case *Enum:
                        v.Comment = wrapper.comment
                        thrift.Enums[v.Name] = v
                case *TypeDef:
                        v.Comment = wrapper.comment
                        thrift.Typedefs[v.Name] = v
                case *Struct:
                        v.Comment = wrapper.comment
                        thrift.Structs[v.Name] = v
                case exception:
                        strct := (*Struct)(v)
                        strct.Comment = wrapper.comment
                        thrift.Exceptions[v.Name] = strct
                case union:
                        strct := unionToStruct(v)
                        strct.Comment = wrapper.comment
                        thrift.Unions[v.Name] = strct
                case *Service:
                        v.Comment = wrapper.comment
                        thrift.Services[v.Name] = v
                case include:
                        name := string(v)
                        if ix := strings.LastIndex(name, "."); ix > 0 {
                            name = name[:ix]
                        }
                        thrift.Includes[name] = string(v)
                case *Scope:
                        v.Comment = wrapper.comment
                        frugal.Scopes = append(frugal.Scopes, v)
                default:
                        return nil, fmt.Errorf("parser: unknown value %#v", v)
                }
        }
        return frugal, nil
}

SyntaxError ← . {
        return nil, errors.New("parser: syntax error")
}

Statement ← docstr:(DocString __)? statement:(ThriftStatement / FrugalStatement) {
        wrapper := &statementWrapper{statement: statement}
        if docstr != nil {
                raw := docstr.([]interface{})[0].(string)
                wrapper.comment = rawCommentToDocStr(raw)
        }
        return wrapper, nil
}

///////////////////////////////////////////////////////////////////////////////
//                                   THRIFT                                  //
///////////////////////////////////////////////////////////////////////////////

ThriftStatement ← Include / Namespace / Const / Enum / TypeDef / Struct / Exception / Union / Service

Include ← "include" _ file:Literal EOS {
        return include(file.(string)), nil
}

Namespace ← "namespace" _ scope:[a-z.-]+ _ ns:Identifier EOS {
        return &namespace{
                scope:     ifaceSliceToString(scope),
                namespace: string(ns.(Identifier)),
        }, nil
}

Const ← "const" _ typ:FieldType _ name:Identifier _ "=" _ value:ConstValue EOS {
    return &Constant{
        Name: string(name.(Identifier)),
        Type: typ.(*Type),
        Value: value,
    }, nil
}

Enum ← "enum" _ name:Identifier __ '{' __ values:(EnumValue __)* '}' EOS {
    vs := toIfaceSlice(values)
    en := &Enum{
        Name: string(name.(Identifier)),
        Values: make(map[string]*EnumValue, len(vs)),
    }
    // Assigns numbers in order. This will behave badly if some values are
    // defined and other are not, but I think that's ok since that's a silly
    // thing to do.
    next := 0
    for _, v := range vs {
        ev := v.([]interface{})[0].(*EnumValue)
        if ev.Value < 0 {
            ev.Value = next
        }
        if ev.Value >= next {
            next = ev.Value + 1
        }
        en.Values[ev.Name] = ev
    }
    return en, nil
}

EnumValue ← name:Identifier _ value:('=' _ IntConstant)? ListSeparator? {
    ev := &EnumValue{
        Name: string(name.(Identifier)),
        Value: -1,
    }
    if value != nil {
        ev.Value = int(value.([]interface{})[2].(int64))
    }
    return ev, nil
}

TypeDef ← "typedef" _ typ:FieldType _ name:Identifier EOS {
    return &TypeDef{
        Name: string(name.(Identifier)),
        Type: typ.(*Type),
    }, nil
}

Struct ← "struct" _ st:StructLike { return st.(*Struct), nil }
Exception ← "exception" _ st:StructLike { return exception(st.(*Struct)), nil }
Union ← "union" _ st:StructLike { return union(st.(*Struct)), nil }
StructLike ← name:Identifier __ '{' __ fields:FieldList '}' EOS {
    st := &Struct{
        Name: string(name.(Identifier)),
    }
    if fields != nil {
        st.Fields = fields.([]*Field)
    }
    return st, nil
}

FieldList ← fields:(Field __)* {
    fs := fields.([]interface{})
    flds := make([]*Field, len(fs))
    for i, f := range fs {
        flds[i] = f.([]interface{})[0].(*Field)
    }
    return flds, nil
}

Field ← docstr:(DocString __)? id:IntConstant _ ':' _ req:FieldReq? _ typ:FieldType _ name:Identifier __ def:('=' _ ConstValue)? ListSeparator? {
    f := &Field{
        ID       : int(id.(int64)),
        Name     : string(name.(Identifier)),
        Type     : typ.(*Type),
    }
    if docstr != nil {
        raw := docstr.([]interface{})[0].(string)
        f.Comment = rawCommentToDocStr(raw)
    }
    if req != nil && !req.(bool) {
        f.Optional = true
    }
    if def != nil {
        f.Default = def.([]interface{})[2]
    }
    return f, nil
}

FieldReq ← ("required" / "optional") {
    return !bytes.Equal(c.text, []byte("optional")), nil
}

Service ← "service" _ name:Identifier _ extends:("extends" __ Identifier __)? __ '{' __ methods:(Function __)* ('}' / EndOfServiceError) EOS {
    ms := methods.([]interface{})
    svc := &Service{
        Name: string(name.(Identifier)),
        Methods: make(map[string]*Method, len(ms)),
    }
    if extends != nil {
        svc.Extends = string(extends.([]interface{})[2].(Identifier))
    }
    for _, m := range ms {
        mt :=  m.([]interface{})[0].(*Method)
        svc.Methods[mt.Name] = mt
    }
    return svc, nil
}
EndOfServiceError ← . {
    return nil, errors.New("parser: expected end of service")
}

Function ← docstr:(DocString __)? oneway:("oneway" __)? typ:FunctionType __ name:Identifier _ '(' __ arguments:FieldList ')' __ exceptions:Throws? ListSeparator? {
    m := &Method{
        Name: string(name.(Identifier)),
    }
    if docstr != nil {
        raw := docstr.([]interface{})[0].(string)
        m.Comment = rawCommentToDocStr(raw)
    }
    t := typ.(*Type)
    if t.Name != "void" {
        m.ReturnType = t
    }
    if oneway != nil {
        m.Oneway = true
    }
    if arguments != nil {
        m.Arguments = arguments.([]*Field)
    }
    if exceptions != nil {
        m.Exceptions = exceptions.([]*Field)
        for _, e := range m.Exceptions {
            e.Optional = true
        }
    }
    return m, nil
}

FunctionType ← typ:("void" / FieldType) {
    if t, ok := typ.(*Type); ok {
        return t, nil
    }
    return &Type{Name: string(c.text)}, nil
}

Throws ← "throws" __ '(' __ exceptions:FieldList ')' {
    return exceptions, nil
}

FieldType ← typ:(BaseType / ContainerType / Identifier) {
    if t, ok := typ.(Identifier); ok {
        return &Type{Name: string(t)}, nil
    }
    return typ, nil
}

DefinitionType ← typ:(BaseType / ContainerType) {
    return typ, nil
}

BaseType ← ("bool" / "byte" / "i16" / "i32" / "i64" / "double" / "string" / "binary" ) {
    return &Type{Name: string(c.text)}, nil
}

ContainerType ← typ:(MapType / SetType / ListType) {
    return typ, nil
}

MapType ← CppType? "map<" WS key:FieldType WS "," WS value:FieldType WS ">" {
    return &Type{
        Name: "map",
        KeyType: key.(*Type),
        ValueType: value.(*Type),
    }, nil
}

SetType ← CppType? "set<" WS typ:FieldType WS ">" {
    return &Type{
        Name: "set",
        ValueType: typ.(*Type),
    }, nil
}

ListType ← "list<" WS typ:FieldType WS ">" {
    return &Type{
        Name: "list",
        ValueType: typ.(*Type),
    }, nil
}

CppType ← "cpp_type" cppType:Literal {
    return cppType, nil
}

ConstValue ← Literal / DoubleConstant / IntConstant / ConstMap / ConstList / Identifier

IntConstant ← [-+]? Digit+ {
    return strconv.ParseInt(string(c.text), 10, 64)
}

DoubleConstant ← [+-]? Digit* '.' Digit* ( ['Ee'] IntConstant )? {
    return strconv.ParseFloat(string(c.text), 64)
}

ConstList ← '[' __ values:(ConstValue __ ListSeparator? __)* __ ']' {
    valueSlice := values.([]interface{})
    vs := make([]interface{}, len(valueSlice))
    for i, v := range valueSlice {
        vs[i] = v.([]interface{})[0]
    }
    return vs, nil
}

ConstMap ← '{' __ values:(ConstValue __ ':' __ ConstValue __ (',' / &'}') __)* '}' {
    if values == nil {
        return nil, nil
    }
    vals := values.([]interface{})
    kvs := make([]KeyValue, len(vals))
    for i, kv := range vals {
        v := kv.([]interface{})
        kvs[i] = KeyValue{
            Key: v[0],
            Value: v[4],
        }
    }
    return kvs, nil
}

///////////////////////////////////////////////////////////////////////////////
//                                   FRUGAL                                  //
///////////////////////////////////////////////////////////////////////////////

FrugalStatement ← Scope

Scope ← docstr:(DocString __)? "scope" __ name:Identifier __ '{' __ prefix:Prefix? __ operations:(Operation __)* ('}' / EndOfScopeError) EOS {
        ops := operations.([]interface{})
        scope := &Scope{
                Name:       string(name.(Identifier)),
                Operations: make([]*Operation, len(ops)),
                Prefix:     defaultPrefix,
        }
        if docstr != nil {
                raw := docstr.([]interface{})[0].(string)
                scope.Comment = rawCommentToDocStr(raw)
        }
        if prefix != nil {
                scope.Prefix = prefix.(*ScopePrefix)
        }
        for i, o := range ops {
                op :=  o.([]interface{})[0].(*Operation)
                scope.Operations[i] = op
        }
        return scope, nil
}

EndOfScopeError ← . {
        return nil, errors.New("parser: expected end of scope")
}

Prefix ← "prefix" _ name:Literal __ {
        return newScopePrefix(name.(string)) 
}

Operation ← docstr:(DocString __)? name:Identifier _ ':' __ param:Identifier __ {
        o := &Operation{
                Name:  string(name.(Identifier)),
                Param: string(param.(Identifier)),
        }
        if docstr != nil {
                raw := docstr.([]interface{})[0].(string)
                o.Comment = rawCommentToDocStr(raw)
        }
        return o, nil
}

///////////////////////////////////////////////////////////////////////////////
//                                   GENERAL                                 //
///////////////////////////////////////////////////////////////////////////////

Literal ← (('"' (`\"` / [^"])* '"') / ('\'' (`\'` / [^'])* '\'')) {
        if len(c.text) != 0 && c.text[0] == '\'' {
                return strconv.Unquote(`"` + strings.Replace(string(c.text[1:len(c.text)-1]), `\'`, `'`, -1) + `"`)
        }
        return strconv.Unquote(string(c.text))
}

Identifier ← (Letter / '_')+ (Letter / Digit / [._])* {
        return Identifier(string(c.text)), nil
}

ListSeparator ← [,;]
Letter ← [A-Za-z]
Digit ← [0-9]

SourceChar ← .
DocString ← "/**" comment:( !"*/" SourceChar )* "*/" {
        chars := make([]byte, len(comment.([]interface{})))
        for i, arr := range comment.([]interface{}) {
                chars[i] = arr.([]interface{})[1].([]byte)[0]
        }
        return strings.TrimSpace(string(chars)), nil
}
Comment ← MultiLineComment / SingleLineComment
MultiLineComment ← !DocString "/*" ( !"*/" SourceChar )* "*/"
MultiLineCommentNoLineTerminator ← !DocString "/*" ( !( "*/" / EOL ) SourceChar )* "*/"
SingleLineComment ← ("//" ( !EOL SourceChar )*) / ("#" ( !EOL SourceChar )*)

__ ← ( Whitespace / EOL / Comment )*
_ ← ( Whitespace / MultiLineCommentNoLineTerminator )*
WS ← Whitespace*

Whitespace ← [ \t\r]
EOL ← '\n'
EOS ← __ ';' / _ SingleLineComment? EOL / __ EOF

EOF ← !.
