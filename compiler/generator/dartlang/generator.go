package dartlang

import (
	"fmt"
	"os"

	"github.com/Workiva/frugal/compiler/generator"
	"github.com/Workiva/frugal/compiler/globals"
	"github.com/Workiva/frugal/compiler/parser"
)

const (
	suffix           = "dart"
	defaultOutputDir = "gen-dart"
)

type Generator struct {
	*generator.BaseGenerator
}

func NewGenerator() generator.OOGenerator {
	return &Generator{&generator.BaseGenerator{}}
}

func (g *Generator) DefaultOutputDir() string {
	return defaultOutputDir
}

func (g *Generator) CheckCompile(path string) error {
	// TODO: Add compile to js
	return nil
}

func (g *Generator) GenerateFile(name, outputDir string, namespaces []*parser.Namespace) (*os.File, error) {
	return g.CreateFile(name, outputDir, suffix, namespaces)
}

func (g *Generator) GenerateDocStringComment(file *os.File) error {
	comment := fmt.Sprintf(
		"// Autogenerated by Frugal Compiler (%s)\n"+
			"// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING",
		generator.Version)

	_, err := file.WriteString(comment)
	return err
}

func (g *Generator) GeneratePackage(file *os.File, name, outputDir string) error {
	_, err := file.WriteString(fmt.Sprintf("library %s;", name))
	return err
}

func (g *Generator) GenerateImports(file *os.File) error {
	// TODO: Find needed libraries
	return nil
}

func (g *Generator) GenerateConstants(file *os.File, name string) error {
	constants := fmt.Sprintf("const String delimiter = \"%s\";", globals.TopicDelimiter)
	_, err := file.WriteString(constants)
	return err
}

func (g *Generator) GeneratePublishers(file *os.File, namespaces []*parser.Namespace) error {
	publishers := ""
	newline := ""
	for _, namespace := range namespaces {
		publishers += newline
		newline = "\n\n"
		publishers = generatePublisher(publishers, namespace)
	}
	_, err := file.WriteString(publishers)
	return err
}

func generatePublisher(publishers string, namespace *parser.Namespace) string {
	return "foo"
}

func (g *Generator) GenerateSubscribers(file *os.File, namespaces []*parser.Namespace) error {
	subscribers := ""
	newline := ""
	for _, namespace := range namespaces {
		subscribers += newline
		newline = "\n\n"
		subscribers = generateSubscriber(subscribers, namespace)
	}
	_, err := file.WriteString(subscribers)
	return err
}

func generateSubscriber(subscribers string, namespace *parser.Namespace) string {
	return "bar"
}
